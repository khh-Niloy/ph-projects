{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ph-projects/madchef-a11-next.js/lib/cloudinary.js"],"sourcesContent":["import { v2 as cloudinary } from \"cloudinary\";\r\n\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nexport default cloudinary;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,0IAAA,CAAA,KAAU,CAAC,MAAM,CAAC;IAChB,YAAY,QAAQ,GAAG,CAAC,qBAAqB;IAC7C,SAAS,QAAQ,GAAG,CAAC,kBAAkB;IACvC,YAAY,QAAQ,GAAG,CAAC,qBAAqB;AAC/C;uCAEe,0IAAA,CAAA,KAAU","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ph-projects/madchef-a11-next.js/app/api/imageUpload/route.js"],"sourcesContent":["import formidable from 'formidable';\r\nimport cloudinary from '@/lib/cloudinary';\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false, // Disable Next.js body parser since we need to handle file parsing manually\r\n  },\r\n};\r\n\r\nexport async function POST(req, res) {\r\n  if (req.method === 'POST') {\r\n    const form = formidable({ keepExtensions: true }); // No need to use `new`\r\n\r\n    form.parse(req, async (err, fields, files) => {\r\n      if (err) {\r\n        return res.status(500).json({ error: 'Error parsing file' });\r\n      }\r\n\r\n      const file = files.image; // Assuming 'image' is the name of the file field in your form\r\n\r\n      try {\r\n        // Upload the file to Cloudinary\r\n        const result = await cloudinary.uploader.upload(file[0].filepath); // file is an array, so we use file[0]\r\n        return res.status(200).json({ url: result.secure_url }); // Send back the image URL\r\n      } catch (error) {\r\n        return res.status(500).json({ error: 'Error uploading to Cloudinary' });\r\n      }\r\n    });\r\n  } else {\r\n    return res.status(405).json({ error: 'Method Not Allowed' });\r\n  }\r\n}\r\n\r\nexport default handler;\r\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;;;AAEO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAEO,eAAe,KAAK,GAAG,EAAE,GAAG;IACjC,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,MAAM,OAAO,CAAA,GAAA,4JAAA,CAAA,UAAU,AAAD,EAAE;YAAE,gBAAgB;QAAK,IAAI,uBAAuB;QAE1E,KAAK,KAAK,CAAC,KAAK,OAAO,KAAK,QAAQ;YAClC,IAAI,KAAK;gBACP,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAAE,OAAO;gBAAqB;YAC5D;YAEA,MAAM,OAAO,MAAM,KAAK,EAAE,8DAA8D;YAExF,IAAI;gBACF,gCAAgC;gBAChC,MAAM,SAAS,MAAM,mHAAA,CAAA,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,GAAG,sCAAsC;gBACzG,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAAE,KAAK,OAAO,UAAU;gBAAC,IAAI,0BAA0B;YACrF,EAAE,OAAO,OAAO;gBACd,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAAE,OAAO;gBAAgC;YACvE;QACF;IACF,OAAO;QACL,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;AACF;uCAEe","debugId":null}}]
}
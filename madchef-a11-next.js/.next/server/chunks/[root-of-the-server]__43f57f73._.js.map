{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ph-projects/madchef-a11-next.js/lib/db/connectDB.js"],"sourcesContent":["const { MongoClient, ServerApiVersion } = require(\"mongodb\");\r\nconst uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASS}@cluster0.m65dh.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0`;\r\n\r\nlet client = new MongoClient(uri, {\r\n  serverApi: {\r\n    version: ServerApiVersion.v1,\r\n    strict: true,\r\n    deprecationErrors: true,\r\n  },\r\n});\r\nlet clientPromise = client.connect();\r\n\r\nexport default clientPromise;\r\n"],"names":[],"mappings":";;;AAAA,MAAM,EAAE,WAAW,EAAE,gBAAgB,EAAE;AACvC,MAAM,MAAM,CAAC,cAAc,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,yEAAyE,CAAC;AAElJ,IAAI,SAAS,IAAI,YAAY,KAAK;IAChC,WAAW;QACT,SAAS,iBAAiB,EAAE;QAC5B,QAAQ;QACR,mBAAmB;IACrB;AACF;AACA,IAAI,gBAAgB,OAAO,OAAO;uCAEnB","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ph-projects/madchef-a11-next.js/lib/db/getCollectionDB.js"],"sourcesContent":["import clientPromise from \"./connectDB\";\r\n\r\nexport async function getCollectionDB(collectionName) {\r\n  const client = await clientPromise;\r\n  const db = client.db(\"madchef-next-js\");\r\n  return db.collection(collectionName);\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,gBAAgB,cAAc;IAClD,MAAM,SAAS,MAAM,wHAAA,CAAA,UAAa;IAClC,MAAM,KAAK,OAAO,EAAE,CAAC;IACrB,OAAO,GAAG,UAAU,CAAC;AACvB","debugId":null}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ph-projects/madchef-a11-next.js/app/api/user-login/route.js"],"sourcesContent":["import { getCollectionDB } from \"@/lib/db/getCollectionDB\";\r\nimport { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport async function POST(req) {\r\n  const body = await req.json();\r\n  const { email, password } = body;\r\n\r\n  const userCollection = await getCollectionDB(\"user\");\r\n  const user = await userCollection.findOne({ email: email });\r\n\r\n  if (!user) {\r\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n  }\r\n\r\n  const checkPass = await bcrypt.compare(password, user.password);\r\n\r\n  if (!checkPass) {\r\n    return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\r\n  }\r\n\r\n  return NextResponse.json({ passwordCheck: true });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAG;IAC5B,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;IAE5B,MAAM,iBAAiB,MAAM,CAAA,GAAA,8HAAA,CAAA,kBAAe,AAAD,EAAE;IAC7C,MAAM,OAAO,MAAM,eAAe,OAAO,CAAC;QAAE,OAAO;IAAM;IAEzD,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,MAAM,YAAY,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;IAE9D,IAAI,CAAC,WAAW;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,eAAe;IAAK;AACjD","debugId":null}}]
}
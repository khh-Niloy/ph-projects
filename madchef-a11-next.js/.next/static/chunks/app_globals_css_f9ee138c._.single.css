/* [project]/app/globals.css [app-client] (css) */
@layer properties {
  @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {
    *, :before, :after, ::backdrop {
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-scale-z: 1;
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-pan-x: initial;
      --tw-pan-y: initial;
      --tw-pinch-zoom: initial;
      --tw-space-y-reverse: 0;
      --tw-space-x-reverse: 0;
      --tw-divide-x-reverse: 0;
      --tw-border-style: solid;
      --tw-divide-y-reverse: 0;
      --tw-gradient-position: initial;
      --tw-gradient-from: #0000;
      --tw-gradient-via: #0000;
      --tw-gradient-to: #0000;
      --tw-gradient-stops: initial;
      --tw-gradient-via-stops: initial;
      --tw-gradient-from-position: 0%;
      --tw-gradient-via-position: 50%;
      --tw-gradient-to-position: 100%;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-ordinal: initial;
      --tw-slashed-zero: initial;
      --tw-numeric-figure: initial;
      --tw-numeric-spacing: initial;
      --tw-numeric-fraction: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-backdrop-blur: initial;
      --tw-backdrop-brightness: initial;
      --tw-backdrop-contrast: initial;
      --tw-backdrop-grayscale: initial;
      --tw-backdrop-hue-rotate: initial;
      --tw-backdrop-invert: initial;
      --tw-backdrop-opacity: initial;
      --tw-backdrop-saturate: initial;
      --tw-backdrop-sepia: initial;
      --tw-duration: initial;
      --tw-ease: initial;
    }
  }
}

@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    --color-red-50: oklch(97.1% .013 17.38);
    --color-red-100: oklch(93.6% .032 17.717);
    --color-red-200: oklch(88.5% .062 18.334);
    --color-red-300: oklch(80.8% .114 19.571);
    --color-red-400: oklch(70.4% .191 22.216);
    --color-red-500: oklch(63.7% .237 25.331);
    --color-red-600: oklch(57.7% .245 27.325);
    --color-red-700: oklch(50.5% .213 27.518);
    --color-red-800: oklch(44.4% .177 26.899);
    --color-red-900: oklch(39.6% .141 25.723);
    --color-amber-100: oklch(96.2% .059 95.617);
    --color-amber-200: oklch(92.4% .12 95.746);
    --color-amber-300: oklch(87.9% .169 91.605);
    --color-amber-400: oklch(82.8% .189 84.429);
    --color-amber-500: oklch(76.9% .188 70.08);
    --color-amber-600: oklch(66.6% .179 58.318);
    --color-amber-700: oklch(55.5% .163 48.998);
    --color-amber-800: oklch(47.3% .137 46.201);
    --color-amber-900: oklch(41.4% .112 45.904);
    --color-green-100: oklch(96.2% .044 156.743);
    --color-green-200: oklch(92.5% .084 155.995);
    --color-green-300: oklch(87.1% .15 154.449);
    --color-green-400: oklch(79.2% .209 151.711);
    --color-green-500: oklch(72.3% .219 149.579);
    --color-green-600: oklch(62.7% .194 149.214);
    --color-green-700: oklch(52.7% .154 150.069);
    --color-green-800: oklch(44.8% .119 151.328);
    --color-green-900: oklch(39.3% .095 152.535);
    --color-cyan-300: oklch(86.5% .127 207.078);
    --color-cyan-400: oklch(78.9% .154 211.53);
    --color-blue-100: oklch(93.2% .032 255.585);
    --color-blue-200: oklch(88.2% .059 254.128);
    --color-blue-300: oklch(80.9% .105 251.813);
    --color-blue-400: oklch(70.7% .165 254.624);
    --color-blue-500: oklch(62.3% .214 259.815);
    --color-blue-600: oklch(54.6% .245 262.881);
    --color-blue-700: oklch(48.8% .243 264.376);
    --color-blue-800: oklch(42.4% .199 265.638);
    --color-blue-900: oklch(37.9% .146 265.522);
    --color-purple-300: oklch(82.7% .119 306.383);
    --color-purple-400: oklch(71.4% .203 305.504);
    --color-gray-50: oklch(98.5% .002 247.839);
    --color-gray-100: oklch(96.7% .003 264.542);
    --color-gray-200: oklch(92.8% .006 264.531);
    --color-gray-300: oklch(87.2% .01 258.338);
    --color-gray-400: oklch(70.7% .022 261.325);
    --color-gray-500: oklch(55.1% .027 264.364);
    --color-gray-600: oklch(44.6% .03 256.802);
    --color-gray-700: oklch(37.3% .034 259.733);
    --color-gray-800: oklch(27.8% .033 256.848);
    --color-gray-900: oklch(21% .034 264.665);
    --color-black: #000;
    --color-white: #fff;
    --spacing: .25rem;
    --container-xs: 20rem;
    --container-md: 28rem;
    --container-lg: 32rem;
    --container-2xl: 42rem;
    --container-4xl: 56rem;
    --container-6xl: 72rem;
    --container-7xl: 80rem;
    --text-xs: .75rem;
    --text-xs--line-height: calc(1 / .75);
    --text-sm: .875rem;
    --text-sm--line-height: calc(1.25 / .875);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --font-weight-light: 300;
    --font-weight-normal: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --tracking-tight: -.025em;
    --leading-relaxed: 1.625;
    --radius-xs: .125rem;
    --radius-sm: .25rem;
    --radius-md: .375rem;
    --radius-lg: .5rem;
    --radius-xl: .75rem;
    --radius-2xl: 1rem;
    --shadow-sm: 0 1px 3px 0 #0000001a, 0 1px 2px -1px #0000001a;
    --shadow-md: 0 4px 6px -1px #0000001a, 0 2px 4px -2px #0000001a;
    --shadow-lg: 0 10px 15px -3px #0000001a, 0 4px 6px -4px #0000001a;
    --shadow-xl: 0 20px 25px -5px #0000001a, 0 8px 10px -6px #0000001a;
    --shadow-2xl: 0 25px 50px -12px #00000040;
    --drop-shadow-xl: 0 9px 7px #0000001a;
    --drop-shadow-2xl: 0 25px 25px #00000026;
    --ease-out: cubic-bezier(0, 0, .2, 1);
    --ease-in-out: cubic-bezier(.4, 0, .2, 1);
    --default-transition-duration: .15s;
    --default-transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}

@layer base {
  *, :after, :before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  html, :host {
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    line-height: 1.5;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }

  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }

  abbr:where([title]) {
    text-decoration: underline dotted;
  }

  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }

  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }

  b, strong {
    font-weight: bolder;
  }

  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }

  small {
    font-size: 80%;
  }

  sub, sup {
    vertical-align: baseline;
    font-size: 75%;
    line-height: 0;
    position: relative;
  }

  sub {
    bottom: -.25em;
  }

  sup {
    top: -.5em;
  }

  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }

  :-moz-focusring {
    outline: auto;
  }

  progress {
    vertical-align: baseline;
  }

  summary {
    display: list-item;
  }

  ol, ul, menu {
    list-style: none;
  }

  img, svg, video, canvas, audio, iframe, embed, object {
    vertical-align: middle;
    display: block;
  }

  img, video {
    max-width: 100%;
    height: auto;
  }

  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }

  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }

  ::file-selector-button {
    margin-inline-end: 4px;
  }

  ::placeholder {
    opacity: 1;
  }

  @supports (not ((-webkit-appearance: -apple-pay-button))) or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentColor;
    }

    @supports (color: color-mix(in lab, red, red)) {
      ::placeholder {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }

  textarea {
    resize: vertical;
  }

  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }

  ::-webkit-datetime-edit {
    display: inline-flex;
  }

  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }

  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }

  :-moz-ui-invalid {
    box-shadow: none;
  }

  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }

  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }

  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }

  :root:has(input.theme-controller[value="light"]:checked), [data-theme="light"] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% .006 285.885);
    --color-primary: oklch(45% .24 277.023);
    --color-primary-content: oklch(93% .034 272.788);
    --color-secondary: oklch(65% .241 354.308);
    --color-secondary-content: oklch(94% .028 342.258);
    --color-accent: oklch(77% .152 181.912);
    --color-accent-content: oklch(38% .063 188.416);
    --color-neutral: oklch(14% .005 285.823);
    --color-neutral-content: oklch(92% .004 286.32);
    --color-info: oklch(74% .16 232.661);
    --color-info-content: oklch(29% .066 243.157);
    --color-success: oklch(76% .177 163.223);
    --color-success-content: oklch(37% .077 168.94);
    --color-warning: oklch(82% .189 84.429);
    --color-warning-content: oklch(41% .112 45.904);
    --color-error: oklch(71% .194 13.428);
    --color-error-content: oklch(27% .105 12.094);
    --radius-selector: .5rem;
    --radius-field: .25rem;
    --radius-box: .5rem;
    --size-selector: .25rem;
    --size-field: .25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }

  @property --radialprogress {
    syntax: "<percentage>"; inherits: true; initial-value: 0%;
  }

  :root {
    scrollbar-color: currentColor #0000;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }

  :root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked) {
    overflow: hidden;
  }

  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }

  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }

  .chat {
    --mask-chat: url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e");
  }

  :where(:root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked)) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :where(:root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked)) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }

  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }
}

@layer components;

@layer utilities {
  .\!diff {
    webkit-user-select: none !important;
    user-select: none !important;
    direction: ltr !important;
    grid-template-columns: auto 1fr !important;
    width: 100% !important;
    display: grid !important;
    position: relative !important;
    overflow: hidden !important;
    container-type: inline-size !important;
  }

  .\!diff:focus-visible, .\!diff:has(.diff-item-1:focus-visible) {
    outline-style: var(--tw-outline-style) !important;
    outline-offset: 1px !important;
    outline-width: 2px !important;
    outline-color: var(--color-base-content) !important;
  }

  .\!diff:focus-visible {
    outline-style: var(--tw-outline-style) !important;
    outline-offset: 1px !important;
    outline-width: 2px !important;
    outline-color: var(--color-base-content) !important;
  }

  .\!diff:focus-visible .diff-resizer {
    min-width: 90cqi !important;
    max-width: 90cqi !important;
  }

  .\!diff:has(.diff-item-2:focus-visible) {
    outline-style: var(--tw-outline-style) !important;
    outline-offset: 1px !important;
    outline-width: 2px !important;
  }

  .\!diff:has(.diff-item-2:focus-visible) .diff-resizer {
    min-width: 10cqi !important;
    max-width: 10cqi !important;
  }

  @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
    .\!diff:focus .diff-resizer {
      min-width: 10cqi !important;
      max-width: 10cqi !important;
    }

    .\!diff:has(.diff-item-1:focus) .diff-resizer {
      min-width: 90cqi !important;
      max-width: 90cqi !important;
    }
  }

  .diff {
    webkit-user-select: none;
    user-select: none;
    direction: ltr;
    grid-template-columns: auto 1fr;
    width: 100%;
    display: grid;
    position: relative;
    overflow: hidden;
    container-type: inline-size;
  }

  .diff:focus-visible, .diff:has(.diff-item-1:focus-visible) {
    outline-style: var(--tw-outline-style);
    outline-offset: 1px;
    outline-width: 2px;
    outline-color: var(--color-base-content);
  }

  .diff:focus-visible {
    outline-style: var(--tw-outline-style);
    outline-offset: 1px;
    outline-width: 2px;
    outline-color: var(--color-base-content);
  }

  .diff:focus-visible .diff-resizer {
    min-width: 90cqi;
    max-width: 90cqi;
  }

  .diff:has(.diff-item-2:focus-visible) {
    outline-style: var(--tw-outline-style);
    outline-offset: 1px;
    outline-width: 2px;
  }

  .diff:has(.diff-item-2:focus-visible) .diff-resizer {
    min-width: 10cqi;
    max-width: 10cqi;
  }

  @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
    .diff:focus .diff-resizer {
      min-width: 10cqi;
      max-width: 10cqi;
    }

    .diff:has(.diff-item-1:focus) .diff-resizer {
      min-width: 90cqi;
      max-width: 90cqi;
    }
  }

  .modal {
    pointer-events: none;
    visibility: hidden;
    width: 100%;
    max-width: none;
    height: 100%;
    max-height: none;
    color: inherit;
    transition: translate .3s ease-out, visibility .3s allow-discrete, background-color .3s ease-out, opacity .1s ease-out;
    overscroll-behavior: contain;
    z-index: 999;
    background-color: #0000;
    place-items: center;
    margin: 0;
    padding: 0;
    display: grid;
    position: fixed;
    inset: 0;
    overflow: hidden;
  }

  .modal::backdrop {
    display: none;
  }

  .modal.modal-open, .modal[open], .modal:target {
    pointer-events: auto;
    visibility: visible;
    opacity: 1;
    background-color: oklch(0% 0 0 / .4);
  }

  :is(.modal.modal-open, .modal[open], .modal:target) .modal-box {
    opacity: 1;
    translate: 0;
    scale: 1;
  }

  @starting-style {
    .modal.modal-open, .modal[open], .modal:target {
      visibility: hidden;
      opacity: 0;
    }
  }

  .drawer-side {
    pointer-events: none;
    visibility: hidden;
    inset-inline-start: 0;
    z-index: 1;
    overscroll-behavior: contain;
    opacity: 0;
    width: 100%;
    transition: opacity .2s ease-out .1s allow-discrete, visibility .3s ease-out .1s allow-discrete;
    grid-template-rows: repeat(1, minmax(0, 1fr));
    grid-template-columns: repeat(1, minmax(0, 1fr));
    grid-row-start: 1;
    grid-column-start: 1;
    place-items: flex-start start;
    height: 100dvh;
    display: grid;
    position: fixed;
    top: 0;
    overflow: hidden;
  }

  .drawer-side > .drawer-overlay {
    cursor: pointer;
    background-color: oklch(0% 0 0 / .4);
    place-self: stretch stretch;
    position: sticky;
    top: 0;
  }

  .drawer-side > * {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .drawer-side > :not(.drawer-overlay) {
    will-change: transform;
    transition: translate .3s ease-out;
    translate: -100%;
  }

  [dir="rtl"] :is(.drawer-side > :not(.drawer-overlay)) {
    translate: 100%;
  }

  .drawer-open > .drawer-side {
    overflow-y: auto;
  }

  .drawer-open > .drawer-toggle {
    display: none;
  }

  .drawer-open > .drawer-toggle ~ .drawer-side {
    pointer-events: auto;
    visibility: visible;
    overscroll-behavior: auto;
    opacity: 1;
    width: auto;
    display: block;
    position: sticky;
  }

  .drawer-open > .drawer-toggle ~ .drawer-side > .drawer-overlay {
    cursor: default;
    background-color: #0000;
  }

  .drawer-open > .drawer-toggle ~ .drawer-side > :not(.drawer-overlay) {
    translate: 0%;
  }

  [dir="rtl"] :is(.drawer-open > .drawer-toggle ~ .drawer-side > :not(.drawer-overlay)) {
    translate: 0%;
  }

  .drawer-open > .drawer-toggle:checked ~ .drawer-side {
    pointer-events: auto;
    visibility: visible;
  }

  .drawer-toggle {
    appearance: none;
    opacity: 0;
    width: 0;
    height: 0;
    position: fixed;
  }

  .drawer-toggle:checked ~ .drawer-side {
    pointer-events: auto;
    visibility: visible;
    opacity: 1;
    overflow-y: auto;
  }

  .drawer-toggle:checked ~ .drawer-side > :not(.drawer-overlay) {
    translate: 0%;
  }

  .drawer-toggle:focus-visible ~ .drawer-content label.drawer-button {
    outline-offset: 2px;
    outline: 2px solid;
  }

  .tooltip {
    --tt-bg: var(--color-neutral);
    --tt-off: calc(100% + .5rem);
    --tt-tail: calc(100% + 1px + .25rem);
    display: inline-block;
    position: relative;
  }

  .tooltip > :where(.tooltip-content), .tooltip[data-tip]:before {
    border-radius: var(--radius-field);
    text-align: center;
    white-space: normal;
    max-width: 20rem;
    color: var(--color-neutral-content);
    opacity: 0;
    background-color: var(--tt-bg);
    pointer-events: none;
    z-index: 1;
    --tw-content: attr(data-tip);
    content: var(--tw-content);
    width: max-content;
    padding-block: .25rem;
    padding-inline: .5rem;
    font-size: .875rem;
    line-height: 1.25em;
    transition: opacity .2s cubic-bezier(.4, 0, .2, 1) 75ms, transform .2s cubic-bezier(.4, 0, .2, 1) 75ms;
    position: absolute;
  }

  .tooltip:after {
    opacity: 0;
    background-color: var(--tt-bg);
    content: "";
    pointer-events: none;
    --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
    width: .625rem;
    height: .25rem;
    mask-position: -1px 0;
    mask-repeat: no-repeat;
    mask-image: var(--mask-tooltip);
    transition: opacity .2s cubic-bezier(.4, 0, .2, 1) 75ms, transform .2s cubic-bezier(.4, 0, .2, 1) 75ms;
    display: block;
    position: absolute;
  }

  :is(.tooltip.tooltip-open, .tooltip[data-tip]:hover, .tooltip:hover, .tooltip:has(:focus-visible)) > .tooltip-content, :is(.tooltip.tooltip-open, .tooltip[data-tip]:hover, .tooltip:hover, .tooltip:has(:focus-visible))[data-tip]:before, :is(.tooltip.tooltip-open, .tooltip[data-tip]:hover, .tooltip:hover, .tooltip:has(:focus-visible)):after {
    opacity: 1;
    --tt-pos: 0rem;
    transition: opacity .2s cubic-bezier(.4, 0, .2, 1), transform .2s cubic-bezier(.4, 0, .2, 1);
  }

  .tooltip > .tooltip-content, .tooltip[data-tip]:before {
    transform: translateX(-50%) translateY(var(--tt-pos, .25rem));
    inset: auto auto var(--tt-off) 50%;
  }

  .tooltip:after {
    transform: translateX(-50%) translateY(var(--tt-pos, .25rem));
    inset: auto auto var(--tt-tail) 50%;
  }

  .tab {
    cursor: pointer;
    appearance: none;
    text-align: center;
    webkit-user-select: none;
    user-select: none;
    --tab-p: 1rem;
    --tab-bg: var(--color-base-100);
    --tab-border-color: var(--color-base-300);
    --tab-radius-ss: 0;
    --tab-radius-se: 0;
    --tab-radius-es: 0;
    --tab-radius-ee: 0;
    --tab-order: 0;
    --tab-radius-min: calc(.75rem - var(--border));
    flex-wrap: wrap;
    order: var(--tab-order);
    height: calc(var(--size-field, .25rem) * 10);
    border-color: #0000;
    justify-content: center;
    align-items: center;
    padding-inline-start: var(--tab-p);
    padding-inline-end: var(--tab-p);
    font-size: .875rem;
    display: inline-flex;
    position: relative;
  }

  @media (hover: hover) {
    .tab:hover {
      color: var(--color-base-content);
    }
  }

  .tab:is(input[type="radio"]) {
    min-width: fit-content;
  }

  .tab:is(input[type="radio"]):after {
    content: attr(aria-label);
  }

  .tab:is(label) {
    position: relative;
  }

  .tab:is(label) input {
    cursor: pointer;
    appearance: none;
    opacity: 0;
    position: absolute;
    inset: 0;
  }

  :is(.tab:checked, .tab:is(label:has(:checked)), .tab:is(.tab-active, [aria-selected="true"])) + .tab-content {
    height: 100%;
    display: block;
  }

  .tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"]) {
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"]) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }

  .tab:not(input):empty {
    cursor: default;
    flex-grow: 1;
  }

  .tab:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .tab:focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .tab:focus-visible, .tab:is(label:has(:checked:focus-visible)) {
    outline-offset: -5px;
    outline: 2px solid;
  }

  .tab[disabled] {
    pointer-events: none;
    opacity: .4;
  }

  .menu {
    --menu-active-fg: var(--color-neutral-content);
    --menu-active-bg: var(--color-neutral);
    flex-flow: column wrap;
    width: fit-content;
    padding: .5rem;
    font-size: .875rem;
    display: flex;
  }

  .menu :where(li ul) {
    white-space: nowrap;
    margin-inline-start: 1rem;
    padding-inline-start: .5rem;
    position: relative;
  }

  .menu :where(li ul):before {
    inset-inline-start: 0;
    background-color: var(--color-base-content);
    opacity: .1;
    width: var(--border);
    content: "";
    position: absolute;
    top: .75rem;
    bottom: .75rem;
  }

  .menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
    display: none;
  }

  .menu :where(li:not(.menu-title) > :not(ul, details, .menu-title, .btn)), .menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
    border-radius: var(--radius-field);
    text-align: start;
    text-wrap: balance;
    user-select: none;
    grid-auto-columns: minmax(auto, max-content) auto max-content;
    grid-auto-flow: column;
    align-content: flex-start;
    align-items: center;
    gap: .5rem;
    padding-block: .375rem;
    padding-inline: .75rem;
    transition-property: color, background-color, box-shadow;
    transition-duration: .2s;
    transition-timing-function: cubic-bezier(0, 0, .2, 1);
    display: grid;
  }

  .menu :where(li > details > summary) {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .menu :where(li > details > summary) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .menu :where(li > details > summary)::-webkit-details-marker {
    display: none;
  }

  :is(.menu :where(li > details > summary), .menu :where(li > .menu-dropdown-toggle)):after {
    content: "";
    transform-origin: 50%;
    pointer-events: none;
    justify-self: flex-end;
    width: .375rem;
    height: .375rem;
    transition-property: rotate, translate;
    transition-duration: .2s;
    display: block;
    translate: 0 -1px;
    rotate: -135deg;
    box-shadow: inset 2px 2px;
  }

  .menu :where(li > details[open] > summary):after, .menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
    translate: 0 1px;
    rotate: 45deg;
  }

  .menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title)):not(.menu-active, :active, .btn).menu-focus, .menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title)):not(.menu-active, :active, .btn):focus-visible {
    cursor: pointer;
    background-color: var(--color-base-content);
    color: var(--color-base-content);
    --tw-outline-style: none;
    outline-style: none;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title)):not(.menu-active, :active, .btn).menu-focus, .menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title)):not(.menu-active, :active, .btn):focus-visible) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }

  @media (forced-colors: active) {
    :is(.menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title)):not(.menu-active, :active, .btn).menu-focus, .menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title)):not(.menu-active, :active, .btn):focus-visible) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover) {
    cursor: pointer;
    background-color: var(--color-base-content);
    --tw-outline-style: none;
    outline-style: none;
    box-shadow: inset 0 1px oklch(0% 0 0 / .01), inset 0 -1px oklch(100% 0 0 / .01);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }

  @media (forced-colors: active) {
    .menu :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .menu :where(li:empty) {
    background-color: var(--color-base-content);
    opacity: .1;
    height: 1px;
    margin: .5rem 1rem;
  }

  .menu :where(li) {
    flex-flow: column wrap;
    flex-shrink: 0;
    align-items: stretch;
    display: flex;
    position: relative;
  }

  .menu :where(li) .badge {
    justify-self: flex-end;
  }

  .menu :where(li) > :not(ul, .menu-title, details, .btn):active, .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
    --tw-outline-style: none;
    color: var(--menu-active-fg);
    background-color: var(--menu-active-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    outline-style: none;
  }

  @media (forced-colors: active) {
    :is(.menu :where(li) > :not(ul, .menu-title, details, .btn):active, .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  :is(.menu :where(li) > :not(ul, .menu-title, details, .btn):active, .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active):not(:is(.menu :where(li) > :not(ul, .menu-title, details, .btn):active, .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active):active) {
    box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
  }

  .menu :where(li).menu-disabled {
    pointer-events: none;
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .menu :where(li).menu-disabled {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }

  .menu .dropdown:focus-within .menu-dropdown-toggle:after {
    translate: 0 1px;
    rotate: 45deg;
  }

  .menu .dropdown-content {
    margin-top: .5rem;
    padding: .5rem;
  }

  .menu .dropdown-content:before {
    display: none;
  }

  .collapse-arrow > .collapse-title:after {
    top: 1.9rem;
    content: "";
    transform-origin: 75% 75%;
    pointer-events: none;
    width: .5rem;
    height: .5rem;
    transition-property: all;
    transition-duration: .2s;
    transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    display: block;
    position: absolute;
    inset-inline-end: 1.4rem;
    transform: translateY(-100%)rotate(45deg);
    box-shadow: 2px 2px;
  }

  .collapse-plus > .collapse-title:after {
    top: .9rem;
    content: "+";
    pointer-events: none;
    width: .5rem;
    height: .5rem;
    transition-property: all;
    transition-duration: .3s;
    transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    display: block;
    position: absolute;
    inset-inline-end: 1.4rem;
  }

  .dropdown {
    position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
    display: inline-block;
    position: relative;
  }

  .dropdown > :not(summary):focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .dropdown > :not(summary):focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .dropdown .dropdown-content {
    position: absolute;
  }

  .dropdown:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content {
    transform-origin: top;
    opacity: 0;
    display: none;
    scale: 95%;
  }

  .dropdown[popover], .dropdown .dropdown-content {
    z-index: 999;
    transition-behavior: allow-discrete;
    transition-property: opacity, scale, display;
    transition-duration: .2s;
    transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    animation: .2s dropdown;
  }

  @starting-style {
    .dropdown[popover], .dropdown .dropdown-content {
      opacity: 0;
      scale: 95%;
    }
  }

  :is(.dropdown.dropdown-open, .dropdown:not(.dropdown-hover):focus, .dropdown:focus-within) > [tabindex]:first-child {
    pointer-events: none;
  }

  :is(.dropdown.dropdown-open, .dropdown:not(.dropdown-hover):focus, .dropdown:focus-within) .dropdown-content {
    opacity: 1;
  }

  .dropdown.dropdown-hover:hover .dropdown-content {
    opacity: 1;
    scale: 100%;
  }

  .dropdown:is(details) summary::-webkit-details-marker {
    display: none;
  }

  :is(.dropdown.dropdown-open, .dropdown:focus, .dropdown:focus-within) .dropdown-content {
    scale: 100%;
  }

  .dropdown:where([popover]) {
    background: none;
  }

  .dropdown[popover] {
    color: inherit;
    position: fixed;
  }

  @supports not (position-area: bottom) {
    .dropdown[popover] {
      margin: auto;
    }

    .dropdown[popover].dropdown-open:not(:popover-open) {
      transform-origin: top;
      opacity: 0;
      display: none;
      scale: 95%;
    }

    .dropdown[popover]::backdrop {
      background-color: oklab(0% none none / .3);
    }
  }

  .dropdown[popover]:not(.dropdown-open, :popover-open) {
    transform-origin: top;
    opacity: 0;
    display: none;
    scale: 95%;
  }

  .btn {
    cursor: pointer;
    text-align: center;
    vertical-align: middle;
    outline-offset: 2px;
    webkit-user-select: none;
    user-select: none;
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    --tw-prose-links: var(--btn-fg);
    height: var(--size);
    font-size: var(--fontsize, .875rem);
    outline-color: var(--btn-color, var(--color-base-content));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    text-shadow: 0 .5px oklch(100% 0 0 / calc(var(--depth) * .15));
    box-shadow: 0 .5px 0 .5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, .25rem) * 10);
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
    --btn-shadow: 0 3px 2px -2px var(--btn-bg), 0 4px 3px -2px var(--btn-bg);
    --btn-noise: var(--fx-noise);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-wrap: nowrap;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    gap: .375rem;
    font-weight: 600;
    transition-property: color, background-color, border-color, box-shadow;
    transition-duration: .2s;
    transition-timing-function: cubic-bezier(0, 0, .2, 1);
    display: inline-flex;
  }

  :where(.btn) {
    width: unset;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
      --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000), 0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
    }
  }

  .prose .btn {
    text-decoration-line: none;
  }

  @media (hover: hover) {
    .btn:hover {
      --btn-bg: var(--btn-color, var(--color-base-200));
    }

    @supports (color: color-mix(in lab, red, red)) {
      .btn:hover {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }
    }
  }

  .btn:focus-visible {
    isolation: isolate;
    outline-width: 2px;
    outline-style: solid;
  }

  .btn:active:not(.btn-active) {
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-border: var(--btn-color, var(--color-base-200));
    --btn-shadow: 0 0 0 0 oklch(0% 0 0 / 0), 0 0 0 0 oklch(0% 0 0 / 0);
    translate: 0 .5px;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:active:not(.btn-active) {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
      --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
    }
  }

  .btn:is(:disabled, [disabled], .btn-disabled) {
    pointer-events: none;
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: var(--color-base-content);
  }

  .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
    background-color: var(--color-base-content);
    box-shadow: none;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled) {
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
  }

  @media (hover: hover) {
    .btn:is(:disabled, [disabled], .btn-disabled):hover {
      pointer-events: none;
      background-color: var(--color-neutral);
      --btn-border: #0000;
      --btn-fg: var(--color-base-content);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .btn:is(:disabled, [disabled], .btn-disabled):hover {
        background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
    }
  }

  .btn:is(input[type="checkbox"], input[type="radio"]) {
    appearance: none;
  }

  .btn:is(input[type="checkbox"], input[type="radio"]):after {
    content: attr(aria-label);
  }

  .btn:where(input:checked:not(.filter .btn)) {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
    isolation: isolate;
  }

  .loading {
    pointer-events: none;
    aspect-ratio: 1;
    vertical-align: middle;
    width: calc(var(--size-selector, .25rem) * 6);
    background-color: currentColor;
    display: inline-block;
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
    mask-position: center;
    mask-size: 100%;
    mask-repeat: no-repeat;
  }

  .collapse {
    border-radius: var(--radius-box, 1rem);
    isolation: isolate;
    grid-template-rows: max-content 0fr;
    width: 100%;
    transition: grid-template-rows .2s;
    display: grid;
    position: relative;
    overflow: hidden;
  }

  .collapse:not(td, tr, colgroup) {
    visibility: visible;
  }

  .collapse > input:is([type="checkbox"], [type="radio"]) {
    appearance: none;
    opacity: 0;
    z-index: 1;
    grid-row-start: 1;
    grid-column-start: 1;
    width: 100%;
    min-height: 3.75rem;
    padding: 1rem;
    padding-inline-end: 3rem;
    transition: background-color .2s ease-out;
  }

  .collapse:is([open], :focus:not(.collapse-close)), .collapse:not(.collapse-close):has( > input:is([type="checkbox"], [type="radio"]):checked) {
    grid-template-rows: max-content 1fr;
  }

  .collapse:is([open], :focus:not(.collapse-close)) > .collapse-content, .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
    visibility: visible;
    min-height: fit-content;
  }

  .collapse:focus-visible, .collapse:has( > input:is([type="checkbox"], [type="radio"]):focus-visible) {
    outline-color: var(--color-base-content);
    outline-offset: 2px;
    outline-width: 2px;
    outline-style: solid;
  }

  .collapse:not(.collapse-close) > input[type="checkbox"], .collapse:not(.collapse-close) > input[type="radio"]:not(:checked), .collapse:not(.collapse-close) > .collapse-title {
    cursor: pointer;
  }

  .collapse:focus:not(.collapse-close, .collapse[open]) > .collapse-title {
    cursor: unset;
  }

  .collapse:is([open], :focus:not(.collapse-close)) > :where(.collapse-content), .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
    padding-bottom: 1rem;
    transition: padding .2s ease-out, background-color .2s ease-out;
  }

  .collapse[open].collapse-arrow > .collapse-title:after {
    transform: translateY(-50%)rotate(225deg);
  }

  .collapse.collapse-open.collapse-arrow > .collapse-title:after {
    transform: translateY(-50%)rotate(225deg);
  }

  .collapse.collapse-open.collapse-plus > .collapse-title:after {
    content: "−";
  }

  .collapse.collapse-arrow:focus:not(.collapse-close) > .collapse-title:after {
    transform: translateY(-50%)rotate(225deg);
  }

  .collapse.collapse-arrow:not(.collapse-close) > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
    transform: translateY(-50%)rotate(225deg);
  }

  .collapse[open].collapse-plus > .collapse-title:after {
    content: "−";
  }

  .collapse.collapse-plus:focus:not(.collapse-close) > .collapse-title:after {
    content: "−";
  }

  .collapse.collapse-plus:not(.collapse-close) > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
    content: "−";
  }

  .collapse:is(details) {
    width: 100%;
  }

  .collapse:is(details) summary {
    display: block;
    position: relative;
  }

  .collapse:is(details) summary::-webkit-details-marker {
    display: none;
  }

  .collapse:is(details) summary {
    outline: none;
  }

  .collapse-content {
    visibility: hidden;
    min-height: 0;
    cursor: unset;
    grid-row-start: 2;
    grid-column-start: 1;
    padding-left: 1rem;
    padding-right: 1rem;
    transition: visibility .2s, padding .2s ease-out, background-color .2s ease-out;
  }

  :is(.validator:user-valid, .validator:has(:user-valid)), :is(.validator:user-valid, .validator:has(:user-valid)):focus, :is(.validator:user-valid, .validator:has(:user-valid)):checked, :is(.validator:user-valid, .validator:has(:user-valid))[aria-checked="true"], :is(.validator:user-valid, .validator:has(:user-valid)):focus-within {
    --input-color: var(--color-success);
  }

  :is(.validator:user-invalid, .validator:has(:user-invalid), .validator[aria-invalid]), :is(.validator:user-invalid, .validator:has(:user-invalid), .validator[aria-invalid]):focus, :is(.validator:user-invalid, .validator:has(:user-invalid), .validator[aria-invalid]):checked, :is(.validator:user-invalid, .validator:has(:user-invalid), .validator[aria-invalid])[aria-checked="true"], :is(.validator:user-invalid, .validator:has(:user-invalid), .validator[aria-invalid]):focus-within {
    --input-color: var(--color-error);
  }

  :is(.validator:user-invalid, .validator:has(:user-invalid), .validator[aria-invalid]) ~ .validator-hint {
    visibility: visible;
    color: var(--color-error);
    display: block;
  }

  .validator ~ .validator-hint {
    visibility: hidden;
  }

  .collapse-open {
    grid-template-rows: max-content 1fr;
  }

  .collapse-open > .collapse-content {
    visibility: visible;
    min-height: fit-content;
    padding-bottom: 1rem;
    transition: padding .2s ease-out, background-color .2s ease-out;
  }

  .collapse {
    visibility: collapse;
  }

  .invisible {
    visibility: hidden;
  }

  .visible {
    visibility: visible;
  }

  .list {
    flex-direction: column;
    font-size: .875rem;
    display: flex;
  }

  .list :where(.list-row) {
    --list-grid-cols: minmax(0, auto) 1fr;
    border-radius: var(--radius-box);
    word-break: break-word;
    grid-auto-flow: column;
    grid-template-columns: var(--list-grid-cols);
    gap: 1rem;
    padding: 1rem;
    display: grid;
    position: relative;
  }

  .list :where(.list-row):has(.list-col-grow:first-child) {
    --list-grid-cols: 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(2)) {
    --list-grid-cols: minmax(0, auto) 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(3)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(4)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(5)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(6)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
  }

  .list :where(.list-row) :not(.list-col-wrap) {
    grid-row-start: 1;
  }

  :is(.list > :not(:last-child).list-row, .list > :not(:last-child) .list-row):after {
    content: "";
    border-bottom: var(--border) solid;
    inset-inline: var(--radius-box);
    border-color: var(--color-base-content);
    position: absolute;
    bottom: 0;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.list > :not(:last-child).list-row, .list > :not(:last-child) .list-row):after {
      border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
    }
  }

  .toast {
    inset-inline: auto 1rem;
    translate: var(--toast-x, 0) var(--toast-y, 0);
    background-color: #0000;
    flex-direction: column;
    gap: .5rem;
    width: max-content;
    max-width: calc(100vw - 2rem);
    display: flex;
    position: fixed;
    top: auto;
    bottom: 1rem;
  }

  .toast > * {
    animation: .25s ease-out toast;
  }

  .toast:where(.toast-start) {
    --toast-x: 0;
    inset-inline: 1rem auto;
  }

  .toast:where(.toast-center) {
    --toast-x: -50%;
    inset-inline: 50%;
  }

  .toast:where(.toast-end) {
    --toast-x: 0;
    inset-inline: auto 1rem;
  }

  .toast:where(.toast-bottom) {
    --toast-y: 0;
    top: auto;
    bottom: 1rem;
  }

  .toast:where(.toast-middle) {
    --toast-y: -50%;
    top: 50%;
    bottom: auto;
  }

  .toast:where(.toast-top) {
    --toast-y: 0;
    top: 1rem;
    bottom: auto;
  }

  .toggle {
    border: var(--border) solid currentColor;
    color: var(--input-color);
    cursor: pointer;
    appearance: none;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    --radius-selector-max: calc(var(--radius-selector)  + var(--radius-selector)  + var(--radius-selector));
    border-radius: calc(var(--radius-selector)  + min(var(--toggle-p), var(--radius-selector-max))  + min(var(--border), var(--radius-selector-max)));
    padding: var(--toggle-p);
    --input-color: var(--color-base-content);
    --toggle-p: calc(var(--size) * .125);
    --size: calc(var(--size-selector, .25rem) * 6);
    width: calc((var(--size) * 2)  - (var(--border)  + var(--toggle-p)) * 2);
    height: var(--size);
    flex-shrink: 0;
    grid-template-columns: 0fr 1fr 1fr;
    place-content: center;
    transition: color .3s, grid-template-columns .2s;
    display: inline-grid;
    position: relative;
    box-shadow: inset 0 1px;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .toggle {
      box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
      --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }

  .toggle > * {
    z-index: 1;
    cursor: pointer;
    appearance: none;
    background-color: #0000;
    border: none;
    grid-column: 2 / span 1;
    grid-row-start: 1;
    height: 100%;
    padding: .125rem;
    transition: opacity .2s, rotate .4s;
  }

  .toggle > *:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .toggle > *:focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .toggle > *:nth-child(2) {
    color: var(--color-base-100);
    rotate: none;
  }

  .toggle > *:nth-child(3) {
    color: var(--color-base-100);
    opacity: 0;
    rotate: -15deg;
  }

  .toggle:has(:checked) > :nth-child(2) {
    opacity: 0;
    rotate: 15deg;
  }

  .toggle:has(:checked) > :nth-child(3) {
    opacity: 1;
    rotate: none;
  }

  .toggle:before {
    aspect-ratio: 1;
    border-radius: var(--radius-selector);
    --tw-content: "";
    content: var(--tw-content);
    height: 100%;
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px currentColor;
    background-color: currentColor;
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    grid-row-start: 1;
    grid-column-start: 2;
    transition: background-color .1s, translate .2s, inset-inline-start .2s;
    position: relative;
    inset-inline-start: 0;
    translate: 0;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .toggle:before {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
    }
  }

  @media (forced-colors: active) {
    .toggle:before {
      outline-style: var(--tw-outline-style);
      outline-offset: calc(1px * -1);
      outline-width: 1px;
    }
  }

  @media print {
    .toggle:before {
      outline-offset: -1rem;
      outline: .25rem solid;
    }
  }

  .toggle:focus-visible, .toggle:has(:focus-visible) {
    outline-offset: 2px;
    outline: 2px solid;
  }

  .toggle:checked, .toggle[aria-checked="true"], .toggle:has( > input:checked) {
    background-color: var(--color-base-100);
    --input-color: var(--color-base-content);
    grid-template-columns: 1fr 1fr 0fr;
  }

  :is(.toggle:checked, .toggle[aria-checked="true"], .toggle:has( > input:checked)):before {
    background-color: currentColor;
  }

  @starting-style {
    :is(.toggle:checked, .toggle[aria-checked="true"], .toggle:has( > input:checked)):before {
      opacity: 0;
    }
  }

  .toggle:indeterminate {
    grid-template-columns: .5fr 1fr .5fr;
  }

  .toggle:disabled {
    cursor: not-allowed;
    opacity: .3;
  }

  .toggle:disabled:before {
    border: var(--border) solid currentColor;
    background-color: #0000;
  }

  .input {
    cursor: text;
    border: var(--border) solid #0000;
    appearance: none;
    background-color: var(--color-base-100);
    vertical-align: middle;
    white-space: nowrap;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    --size: calc(var(--size-field, .25rem) * 10);
    --input-color: var(--color-base-content);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-shrink: 1;
    align-items: center;
    gap: .5rem;
    padding-inline: .75rem;
    font-size: .875rem;
    display: inline-flex;
    position: relative;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .input {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }

  .input:where(input) {
    display: inline-flex;
  }

  .input :where(input) {
    appearance: none;
    background-color: #0000;
    border: none;
    width: 100%;
    height: 100%;
    display: inline-flex;
  }

  .input :where(input):focus, .input :where(input):focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    :is(.input :where(input):focus, .input :where(input):focus-within) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .input :where(input[type="date"]) {
    display: inline-block;
  }

  .input:focus, .input:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.input:focus, .input:focus-within) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }

  .input:has( > input[disabled]), .input:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    box-shadow: none;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.input:has( > input[disabled]), .input:is(:disabled, [disabled])) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }

  :is(.input:has( > input[disabled]), .input:is(:disabled, [disabled]))::placeholder {
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.input:has( > input[disabled]), .input:is(:disabled, [disabled]))::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }

  .input:has( > input[disabled]) > input[disabled] {
    cursor: not-allowed;
  }

  .input::-webkit-date-and-time-value {
    text-align: inherit;
  }

  .input[type="number"]::-webkit-inner-spin-button {
    margin-block: -.75rem;
    margin-inline-end: -.75rem;
  }

  .input::-webkit-calendar-picker-indicator {
    position: absolute;
    inset-inline-end: .75em;
  }

  .indicator {
    width: max-content;
    display: inline-flex;
    position: relative;
  }

  .indicator :where(.indicator-item) {
    z-index: 1;
    white-space: nowrap;
    top: var(--inidicator-t, 0);
    bottom: var(--inidicator-b, auto);
    left: var(--inidicator-s, auto);
    right: var(--inidicator-e, 0);
    translate: var(--inidicator-x, 50%) var(--indicator-y, -50%);
    position: absolute;
  }

  .table {
    border-radius: var(--radius-box);
    text-align: left;
    width: 100%;
    font-size: .875rem;
    position: relative;
  }

  .table:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    text-align: right;
  }

  @media (hover: hover) {
    :is(.table tr.row-hover, .table tr.row-hover:nth-child(2n)):hover {
      background-color: var(--color-base-200);
    }
  }

  .table :where(th, td) {
    vertical-align: middle;
    padding-block: .75rem;
    padding-inline: 1rem;
  }

  .table :where(thead, tfoot) {
    white-space: nowrap;
    color: var(--color-base-content);
    font-size: .875rem;
    font-weight: 600;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead, tfoot) {
      color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }

  .table :where(tfoot) {
    border-top: var(--border) solid var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tfoot) {
      border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }

  .table :where(.table-pin-rows thead tr) {
    z-index: 1;
    background-color: var(--color-base-100);
    position: sticky;
    top: 0;
  }

  .table :where(.table-pin-rows tfoot tr) {
    z-index: 1;
    background-color: var(--color-base-100);
    position: sticky;
    bottom: 0;
  }

  .table :where(.table-pin-cols tr th) {
    background-color: var(--color-base-100);
    position: sticky;
    left: 0;
    right: 0;
  }

  .table :where(thead tr, tbody tr:not(:last-child)) {
    border-bottom: var(--border) solid var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead tr, tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }

  .steps {
    counter-reset: step;
    grid-auto-columns: 1fr;
    grid-auto-flow: column;
    display: inline-grid;
    overflow: auto hidden;
  }

  .steps .step {
    text-align: center;
    --step-bg: var(--color-base-300);
    --step-fg: var(--color-base-content);
    grid-template-rows: 40px 1fr;
    grid-template-columns: auto;
    place-items: center;
    min-width: 4rem;
    display: grid;
  }

  .steps .step:before {
    width: 100%;
    height: .5rem;
    color: var(--step-bg);
    background-color: var(--step-bg);
    --tw-content: "";
    content: var(--tw-content);
    border: 1px solid;
    grid-row-start: 1;
    grid-column-start: 1;
    margin-inline-start: -100%;
    top: 0;
  }

  .steps .step > .step-icon, .steps .step:not(:has(.step-icon)):after {
    content: counter(step);
    counter-increment: step;
    z-index: 1;
    color: var(--step-fg);
    background-color: var(--step-bg);
    border: 1px solid var(--step-bg);
    border-radius: 3.40282e38px;
    grid-row-start: 1;
    grid-column-start: 1;
    place-self: center;
    place-items: center;
    width: 2rem;
    height: 2rem;
    display: grid;
    position: relative;
  }

  .steps .step:first-child:before {
    content: none;
  }

  .steps .step[data-content]:after {
    content: attr(data-content);
  }

  .steps .step-neutral + .step-neutral:before, .steps .step-neutral:after, .steps .step-neutral > .step-icon {
    --step-bg: var(--color-neutral);
    --step-fg: var(--color-neutral-content);
  }

  .steps .step-primary + .step-primary:before, .steps .step-primary:after, .steps .step-primary > .step-icon {
    --step-bg: var(--color-primary);
    --step-fg: var(--color-primary-content);
  }

  .steps .step-secondary + .step-secondary:before, .steps .step-secondary:after, .steps .step-secondary > .step-icon {
    --step-bg: var(--color-secondary);
    --step-fg: var(--color-secondary-content);
  }

  .steps .step-accent + .step-accent:before, .steps .step-accent:after, .steps .step-accent > .step-icon {
    --step-bg: var(--color-accent);
    --step-fg: var(--color-accent-content);
  }

  .steps .step-info + .step-info:before, .steps .step-info:after, .steps .step-info > .step-icon {
    --step-bg: var(--color-info);
    --step-fg: var(--color-info-content);
  }

  .steps .step-success + .step-success:before, .steps .step-success:after, .steps .step-success > .step-icon {
    --step-bg: var(--color-success);
    --step-fg: var(--color-success-content);
  }

  .steps .step-warning + .step-warning:before, .steps .step-warning:after, .steps .step-warning > .step-icon {
    --step-bg: var(--color-warning);
    --step-fg: var(--color-warning-content);
  }

  .steps .step-error + .step-error:before, .steps .step-error:after, .steps .step-error > .step-icon {
    --step-bg: var(--color-error);
    --step-fg: var(--color-error-content);
  }

  .diff-resizer {
    z-index: 1;
    resize: horizontal;
    opacity: 0;
    cursor: ew-resize;
    transform-origin: 100% 100%;
    clip-path: inset(calc(100% - .75rem) 0 0 calc(100% - .75rem));
    grid-row-start: 1;
    grid-column-start: 1;
    width: 50cqi;
    min-width: 1rem;
    max-width: calc(100cqi - 1rem);
    height: .5rem;
    transition: min-width .3s ease-out, max-width .3s ease-out;
    position: relative;
    top: 50%;
    overflow: hidden;
    transform: scaleY(3)translate(.35rem, .08rem);
  }

  .range {
    appearance: none;
    webkit-appearance: none;
    --range-thumb: var(--color-base-100);
    --range-thumb-size: calc(var(--size-selector, .25rem) * 6);
    --range-progress: currentColor;
    --range-fill: 1;
    --range-p: .25rem;
    --range-bg: currentColor;
    cursor: pointer;
    vertical-align: middle;
    --radius-selector-max: calc(var(--radius-selector)  + var(--radius-selector)  + var(--radius-selector));
    border-radius: calc(var(--radius-selector)  + min(var(--range-p), var(--radius-selector-max)));
    width: clamp(3rem, 20rem, 100%);
    height: var(--range-thumb-size);
    background-color: #0000;
    border: none;
    overflow: hidden;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .range {
      --range-bg: color-mix(in oklab, currentColor 10%, #0000);
    }
  }

  [dir="rtl"] .range {
    --range-dir: -1;
  }

  .range:focus {
    outline: none;
  }

  .range:focus-visible {
    outline-offset: 2px;
    outline: 2px solid;
  }

  .range::-webkit-slider-runnable-track {
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    width: 100%;
    height: calc(var(--range-thumb-size) * .5);
  }

  @media (forced-colors: active) {
    .range::-webkit-slider-runnable-track {
      border: 1px solid;
    }

    .range::-moz-range-track {
      border: 1px solid;
    }
  }

  .range::-webkit-slider-thumb {
    box-sizing: border-box;
    border-radius: calc(var(--radius-selector)  + min(var(--range-p), var(--radius-selector-max)));
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    appearance: none;
    webkit-appearance: none;
    color: var(--range-progress);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem)  - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    background-color: currentColor;
    position: relative;
    top: 50%;
    transform: translateY(-50%);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .range::-webkit-slider-thumb {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem)  - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
  }

  .range::-moz-range-track {
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    width: 100%;
    height: calc(var(--range-thumb-size) * .5);
  }

  .range::-moz-range-thumb {
    box-sizing: border-box;
    border-radius: calc(var(--radius-selector)  + min(var(--range-p), var(--radius-selector-max)));
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    color: var(--range-progress);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem)  - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    background-color: currentColor;
    position: relative;
    top: 50%;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .range::-moz-range-thumb {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem)  - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
  }

  .range:disabled {
    cursor: not-allowed;
    opacity: .3;
  }

  .countdown {
    display: inline-flex;
  }

  .countdown.countdown {
    line-height: 1em;
  }

  .countdown > * {
    height: 1em;
    display: inline-block;
    overflow-y: hidden;
  }

  .countdown > *:before {
    content: "00\a 01\a 02\a 03\a 04\a 05\a 06\a 07\a 08\a 09\a 10\a 11\a 12\a 13\a 14\a 15\a 16\a 17\a 18\a 19\a 20\a 21\a 22\a 23\a 24\a 25\a 26\a 27\a 28\a 29\a 30\a 31\a 32\a 33\a 34\a 35\a 36\a 37\a 38\a 39\a 40\a 41\a 42\a 43\a 44\a 45\a 46\a 47\a 48\a 49\a 50\a 51\a 52\a 53\a 54\a 55\a 56\a 57\a 58\a 59\a 60\a 61\a 62\a 63\a 64\a 65\a 66\a 67\a 68\a 69\a 70\a 71\a 72\a 73\a 74\a 75\a 76\a 77\a 78\a 79\a 80\a 81\a 82\a 83\a 84\a 85\a 86\a 87\a 88\a 89\a 90\a 91\a 92\a 93\a 94\a 95\a 96\a 97\a 98\a 99\a ";
    white-space: pre;
    top: calc(var(--value) * -1em);
    text-align: center;
    transition: all 1s cubic-bezier(1, 0, 0, 1);
    position: relative;
  }

  .select {
    border: var(--border) solid #0000;
    appearance: none;
    background-color: var(--color-base-100);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    text-overflow: ellipsis;
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    --size: calc(var(--size-field, .25rem) * 10);
    background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
    background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
    background-repeat: no-repeat;
    background-size: 4px 4px, 4px 4px;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-shrink: 1;
    align-items: center;
    gap: .375rem;
    padding-inline: 1rem 1.75rem;
    font-size: .875rem;
    display: inline-flex;
    position: relative;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .select {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }

  [dir="rtl"] .select {
    background-position: 12px calc(1px + 50%), 16px calc(1px + 50%);
  }

  .select select {
    appearance: none;
    background: inherit;
    border-radius: inherit;
    border-style: none;
    width: calc(100% + 2.75rem);
    height: calc(100% - 2px);
    margin-inline: -1rem -1.75rem;
    padding-inline: 1rem 1.75rem;
  }

  .select select:focus, .select select:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    :is(.select select:focus, .select select:focus-within) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .select select:not(:last-child) {
    background-image: none;
    margin-inline-end: -1.375rem;
  }

  .select:focus, .select:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.select:focus, .select:focus-within) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }

  .select:has( > select[disabled]), .select:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.select:has( > select[disabled]), .select:is(:disabled, [disabled])) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }

  :is(.select:has( > select[disabled]), .select:is(:disabled, [disabled]))::placeholder {
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.select:has( > select[disabled]), .select:is(:disabled, [disabled]))::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }

  .select:has( > select[disabled]) > select[disabled] {
    cursor: not-allowed;
  }

  .card {
    border-radius: var(--radius-box);
    outline-offset: 2px;
    outline: 0 solid #0000;
    flex-direction: column;
    transition: outline .2s ease-in-out;
    display: flex;
    position: relative;
  }

  .card:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .card:focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .card:focus-visible {
    outline-color: currentColor;
  }

  .card :where(figure:first-child) {
    border-start-start-radius: inherit;
    border-start-end-radius: inherit;
    border-end-end-radius: unset;
    border-end-start-radius: unset;
    overflow: hidden;
  }

  .card :where(figure:last-child) {
    border-start-start-radius: unset;
    border-start-end-radius: unset;
    border-end-end-radius: inherit;
    border-end-start-radius: inherit;
    overflow: hidden;
  }

  .card:where(.card-border) {
    border: var(--border) solid var(--color-base-200);
  }

  .card:where(.card-dash) {
    border: var(--border) dashed var(--color-base-200);
  }

  .card.image-full {
    display: grid;
  }

  .card.image-full > * {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .card.image-full > .card-body {
    color: var(--color-neutral-content);
    position: relative;
  }

  .card.image-full :where(figure) {
    border-radius: inherit;
    overflow: hidden;
  }

  .card.image-full > figure img {
    object-fit: cover;
    filter: brightness(28%);
    height: 100%;
  }

  .card figure {
    justify-content: center;
    align-items: center;
    display: flex;
  }

  .card:has( > input:is(input[type="checkbox"], input[type="radio"])) {
    cursor: pointer;
    user-select: none;
  }

  .card:has( > :checked) {
    outline: 2px solid;
  }

  .swap {
    cursor: pointer;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    place-content: center;
    display: inline-grid;
    position: relative;
  }

  .swap input {
    appearance: none;
    border: none;
  }

  .swap > * {
    grid-row-start: 1;
    grid-column-start: 1;
    transition-property: transform, rotate, opacity;
    transition-duration: .2s;
    transition-timing-function: cubic-bezier(0, 0, .2, 1);
  }

  .swap .swap-on, .swap .swap-indeterminate, .swap input:indeterminate ~ .swap-on {
    opacity: 0;
  }

  .swap input:is(:checked, :indeterminate) ~ .swap-off {
    opacity: 0;
  }

  .swap input:checked ~ .swap-on, .swap input:indeterminate ~ .swap-indeterminate {
    opacity: 1;
  }

  .collapse-title {
    grid-row-start: 1;
    grid-column-start: 1;
    width: 100%;
    min-height: 3.75rem;
    padding: 1rem;
    padding-inline-end: 3rem;
    transition: background-color .2s ease-out;
    position: relative;
  }

  .sr-only {
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    position: absolute;
    overflow: hidden;
  }

  .not-sr-only {
    clip: auto;
    white-space: normal;
    width: auto;
    height: auto;
    margin: 0;
    padding: 0;
    position: static;
    overflow: visible;
  }

  .avatar {
    vertical-align: middle;
    display: inline-flex;
    position: relative;
  }

  .avatar > div {
    aspect-ratio: 1;
    display: block;
    overflow: hidden;
  }

  .avatar img {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }

  .checkbox {
    border: var(--border) solid var(--input-color, var(--color-base-content));
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 0 #0000 inset, 0 0 #0000;
    --size: calc(var(--size-selector, .25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    flex-shrink: 0;
    padding: .25rem;
    transition: background-color .2s, box-shadow .2s;
    position: relative;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .checkbox {
      border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
  }

  .checkbox:before {
    --tw-content: "";
    content: var(--tw-content);
    opacity: 0;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    width: 100%;
    height: 100%;
    box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    background-color: currentColor;
    font-size: 1rem;
    line-height: .75;
    transition: clip-path .3s .1s, opacity .1s .1s, rotate .3s .1s, translate .3s .1s;
    display: block;
    rotate: 45deg;
  }

  .checkbox:focus-visible {
    outline: 2px solid var(--input-color, currentColor);
    outline-offset: 2px;
  }

  .checkbox:checked, .checkbox[aria-checked="true"] {
    background-color: var(--input-color, #0000);
    box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * .1));
  }

  :is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
    opacity: 1;
  }

  @media (forced-colors: active) {
    :is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
      --tw-content: "✔︎";
      clip-path: none;
      background-color: #0000;
      rotate: none;
    }
  }

  @media print {
    :is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
      --tw-content: "✔︎";
      clip-path: none;
      background-color: #0000;
      rotate: none;
    }
  }

  .checkbox:indeterminate:before {
    opacity: 1;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
    translate: 0 -35%;
    rotate: none;
  }

  .checkbox:disabled {
    cursor: not-allowed;
    opacity: .2;
  }

  .radio {
    cursor: pointer;
    appearance: none;
    vertical-align: middle;
    border: var(--border) solid var(--input-color, currentColor);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset;
    --size: calc(var(--size-selector, .25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, currentColor);
    border-radius: 3.40282e38px;
    flex-shrink: 0;
    padding: .25rem;
    position: relative;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .radio {
      border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
    }
  }

  .radio:before {
    --tw-content: "";
    content: var(--tw-content);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    border-radius: 3.40282e38px;
    width: 100%;
    height: 100%;
    display: block;
  }

  .radio:focus-visible {
    outline: 2px solid;
  }

  .radio:checked, .radio[aria-checked="true"] {
    background-color: var(--color-base-100);
    border-color: currentColor;
    animation: .2s ease-out radio;
  }

  :is(.radio:checked, .radio[aria-checked="true"]):before {
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * .1));
    background-color: currentColor;
  }

  @media (forced-colors: active) {
    :is(.radio:checked, .radio[aria-checked="true"]):before {
      outline-style: var(--tw-outline-style);
      outline-offset: calc(1px * -1);
      outline-width: 1px;
    }
  }

  @media print {
    :is(.radio:checked, .radio[aria-checked="true"]):before {
      outline-offset: -1rem;
      outline: .25rem solid;
    }
  }

  .radio:disabled {
    cursor: not-allowed;
    opacity: .2;
  }

  .rating {
    vertical-align: middle;
    display: inline-flex;
    position: relative;
  }

  .rating input {
    appearance: none;
    border: none;
  }

  .rating :where(*) {
    background-color: var(--color-base-content);
    opacity: .2;
    border-radius: 0;
    width: 1.5rem;
    height: 1.5rem;
    animation: .25s ease-out rating;
  }

  .rating :where(*):is(input) {
    cursor: pointer;
  }

  .rating .rating-hidden {
    background-color: #0000;
    width: .5rem;
  }

  .rating input[type="radio"]:checked {
    background-image: none;
  }

  .rating *:checked, .rating *[aria-checked="true"], .rating *[aria-current="true"], .rating *:has( ~ :checked,  ~ [aria-checked="true"],  ~ [aria-current="true"]) {
    opacity: 1;
  }

  .rating *:focus-visible {
    transition: scale .2s ease-out;
    scale: 1.1;
  }

  .rating :active:focus {
    animation: none;
    scale: 1.1;
  }

  .rating.rating-xs :where(:not(.rating-hidden)) {
    width: 1rem;
    height: 1rem;
  }

  .rating.rating-sm :where(:not(.rating-hidden)) {
    width: 1.25rem;
    height: 1.25rem;
  }

  .rating.rating-md :where(:not(.rating-hidden)) {
    width: 1.5rem;
    height: 1.5rem;
  }

  .rating.rating-lg :where(:not(.rating-hidden)) {
    width: 1.75rem;
    height: 1.75rem;
  }

  .rating.rating-xl :where(:not(.rating-hidden)) {
    width: 2rem;
    height: 2rem;
  }

  .progress {
    appearance: none;
    border-radius: var(--radius-box);
    width: 100%;
    height: .5rem;
    color: var(--color-base-content);
    background-color: currentColor;
    position: relative;
    overflow: hidden;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .progress {
      background-color: color-mix(in oklab, currentColor 20%, transparent);
    }
  }

  .progress:indeterminate {
    background-image: repeating-linear-gradient(90deg, currentColor -1% 10%, #0000 10% 90%);
    background-position-x: 15%;
    background-size: 200%;
    animation: 5s ease-in-out infinite progress;
  }

  @supports ((-moz-appearance: none)) {
    .progress:indeterminate::-moz-progress-bar {
      background-color: #0000;
      background-image: repeating-linear-gradient(90deg, currentColor -1% 10%, #0000 10% 90%);
      background-position-x: 15%;
      background-size: 200%;
      animation: 5s ease-in-out infinite progress;
    }
  }

  @supports ((-moz-appearance: none)) {
    .progress::-moz-progress-bar {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }

  @supports ((-webkit-appearance: none)) {
    .progress::-webkit-progress-bar {
      border-radius: var(--radius-box);
      background-color: #0000;
    }

    .progress::-webkit-progress-value {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }

  .absolute {
    position: absolute;
  }

  .fixed {
    position: fixed;
  }

  .relative {
    position: relative;
  }

  .static {
    position: static;
  }

  .sticky {
    position: sticky;
  }

  .-inset-1 {
    inset: calc(var(--spacing) * -1);
  }

  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }

  .dropdown-right {
    --anchor-h: right;
    --anchor-v: span-bottom;
  }

  .dropdown-right .dropdown-content {
    inset-inline-start: 100%;
    transform-origin: 0;
    top: 0;
    bottom: auto;
  }

  .dropdown-left {
    --anchor-h: left;
    --anchor-v: span-bottom;
  }

  .dropdown-left .dropdown-content {
    inset-inline-end: 100%;
    transform-origin: 100%;
    top: 0;
    bottom: auto;
  }

  .dropdown-end {
    --anchor-h: span-left;
  }

  .dropdown-end :where(.dropdown-content) {
    inset-inline-end: 0;
    translate: 0;
  }

  .dropdown-end.dropdown-left {
    --anchor-h: left;
    --anchor-v: span-top;
  }

  .dropdown-end.dropdown-left .dropdown-content {
    top: auto;
    bottom: 0;
  }

  .dropdown-end.dropdown-right {
    --anchor-h: right;
    --anchor-v: span-top;
  }

  .dropdown-end.dropdown-right .dropdown-content {
    top: auto;
    bottom: 0;
  }

  .end-full {
    inset-inline-end: 100%;
  }

  .top-0 {
    top: calc(var(--spacing) * 0);
  }

  .top-1 {
    top: calc(var(--spacing) * 1);
  }

  .top-4 {
    top: calc(var(--spacing) * 4);
  }

  .top-8 {
    top: calc(var(--spacing) * 8);
  }

  .top-20 {
    top: calc(var(--spacing) * 20);
  }

  .top-\[1\.5rem\] {
    top: 1.5rem;
  }

  .top-\[1px\] {
    top: 1px;
  }

  .top-\[3\.3rem\] {
    top: 3.3rem;
  }

  .top-\[50\%\] {
    top: 50%;
  }

  .top-\[60\%\] {
    top: 60%;
  }

  .top-full {
    top: 100%;
  }

  .-right-\[2\.5rem\] {
    right: -2.5rem;
  }

  .right-0 {
    right: calc(var(--spacing) * 0);
  }

  .right-4 {
    right: calc(var(--spacing) * 4);
  }

  .right-5 {
    right: calc(var(--spacing) * 5);
  }

  .right-40 {
    right: calc(var(--spacing) * 40);
  }

  .right-\[0\.5rem\] {
    right: .5rem;
  }

  .bottom-3 {
    bottom: calc(var(--spacing) * 3);
  }

  .left-0 {
    left: calc(var(--spacing) * 0);
  }

  .left-3 {
    left: calc(var(--spacing) * 3);
  }

  .left-5 {
    left: calc(var(--spacing) * 5);
  }

  .left-\[50\%\] {
    left: 50%;
  }

  .hero-content {
    isolation: isolate;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    max-width: 80rem;
    padding: 1rem;
    display: flex;
  }

  .textarea {
    border: var(--border) solid #0000;
    appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    vertical-align: middle;
    border-color: var(--input-color);
    width: clamp(3rem, 20rem, 100%);
    min-height: 5rem;
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    --input-color: var(--color-base-content);
    flex-shrink: 1;
    padding-block: .5rem;
    padding-inline: .75rem;
    font-size: .875rem;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .textarea {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }

  .textarea textarea {
    appearance: none;
    background-color: #0000;
    border: none;
  }

  .textarea textarea:focus, .textarea textarea:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    :is(.textarea textarea:focus, .textarea textarea:focus-within) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .textarea:focus, .textarea:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.textarea:focus, .textarea:focus-within) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }

  .textarea:has( > textarea[disabled]), .textarea:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    box-shadow: none;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.textarea:has( > textarea[disabled]), .textarea:is(:disabled, [disabled])) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }

  :is(.textarea:has( > textarea[disabled]), .textarea:is(:disabled, [disabled]))::placeholder {
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.textarea:has( > textarea[disabled]), .textarea:is(:disabled, [disabled]))::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }

  .textarea:has( > textarea[disabled]) > textarea[disabled] {
    cursor: not-allowed;
  }

  .btn-active {
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-shadow: 0 0 0 0 oklch(0% 0 0 / 0), 0 0 0 0 oklch(0% 0 0 / 0);
    isolation: isolate;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn-active {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
    }
  }

  .isolate {
    isolation: isolate;
  }

  .isolation-auto {
    isolation: auto;
  }

  .stack {
    grid-template-rows: 3px 4px 1fr 4px 3px;
    grid-template-columns: 3px 4px 1fr 4px 3px;
    display: inline-grid;
  }

  .stack > * {
    width: 100%;
    height: 100%;
  }

  .stack > *:nth-child(n+2) {
    opacity: .7;
    width: 100%;
  }

  .stack > *:nth-child(2) {
    z-index: 2;
    opacity: .9;
  }

  .stack > *:first-child {
    z-index: 3;
    width: 100%;
  }

  :is(.stack, .stack.stack-bottom) > * {
    grid-area: 3 / 3 / 6 / 4;
  }

  :is(.stack, .stack.stack-bottom) > *:nth-child(2) {
    grid-area: 2 / 2 / 5 / 5;
  }

  :is(.stack, .stack.stack-bottom) > *:first-child {
    grid-area: 1 / 1 / 4 / 6;
  }

  .stack.stack-top > * {
    grid-area: 1 / 3 / 4 / 4;
  }

  .stack.stack-top > *:nth-child(2) {
    grid-area: 2 / 2 / 5 / 5;
  }

  .stack.stack-top > *:first-child {
    grid-area: 3 / 1 / 6 / 6;
  }

  .stack.stack-start > * {
    grid-area: 3 / 1 / 4 / 4;
  }

  .stack.stack-start > *:nth-child(2) {
    grid-area: 2 / 2 / 5 / 5;
  }

  .stack.stack-start > *:first-child {
    grid-area: 1 / 3 / 6 / 6;
  }

  .stack.stack-end > * {
    grid-area: 3 / 3 / 4 / 6;
  }

  .stack.stack-end > *:nth-child(2) {
    grid-area: 2 / 2 / 5 / 5;
  }

  .stack.stack-end > *:first-child {
    grid-area: 1 / 1 / 6 / 4;
  }

  .z-0 {
    z-index: 0;
  }

  .z-1 {
    z-index: 1;
  }

  .z-10 {
    z-index: 10;
  }

  .z-40 {
    z-index: 40;
  }

  .z-50 {
    z-index: 50;
  }

  .z-\[1\] {
    z-index: 1;
  }

  .tab-content {
    order: var(--tabcontent-order);
    --tabcontent-radius-ss: 0;
    --tabcontent-radius-se: 0;
    --tabcontent-radius-es: 0;
    --tabcontent-radius-ee: 0;
    --tabcontent-order: 1;
    width: 100%;
    margin: var(--tabcontent-margin);
    border-color: #0000;
    border-width: var(--border);
    border-start-start-radius: var(--tabcontent-radius-ss);
    border-start-end-radius: var(--tabcontent-radius-se);
    border-end-end-radius: var(--tabcontent-radius-ee);
    border-end-start-radius: var(--tabcontent-radius-es);
    display: none;
  }

  .col-span-1 {
    grid-column: span 1 / span 1;
  }

  .col-span-2 {
    grid-column: span 2 / span 2;
  }

  .col-span-3 {
    grid-column: span 3 / span 3;
  }

  .col-span-4 {
    grid-column: span 4 / span 4;
  }

  .col-span-5 {
    grid-column: span 5 / span 5;
  }

  .col-span-6 {
    grid-column: span 6 / span 6;
  }

  .col-span-7 {
    grid-column: span 7 / span 7;
  }

  .hero {
    background-position: center;
    background-size: cover;
    place-items: center;
    width: 100%;
    display: grid;
  }

  .hero > * {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .modal-box {
    background-color: var(--color-base-100);
    border-top-left-radius: var(--modal-tl, var(--radius-box));
    border-top-right-radius: var(--modal-tr, var(--radius-box));
    border-bottom-left-radius: var(--modal-bl, var(--radius-box));
    border-bottom-right-radius: var(--modal-br, var(--radius-box));
    opacity: 0;
    overscroll-behavior: contain;
    grid-row-start: 1;
    grid-column-start: 1;
    width: 91.6667%;
    max-width: 32rem;
    max-height: 100vh;
    padding: 1.5rem;
    transition: translate .3s ease-out, scale .3s ease-out, opacity .2s ease-out 50ms, box-shadow .3s ease-out;
    overflow-y: auto;
    scale: 95%;
    box-shadow: 0 25px 50px -12px oklch(0% 0 0 / .25);
  }

  .drawer-content {
    grid-row-start: 1;
    grid-column-start: 2;
    min-width: 0;
  }

  .row-span-1 {
    grid-row: span 1 / span 1;
  }

  .row-span-2 {
    grid-row: span 2 / span 2;
  }

  .row-span-3 {
    grid-row: span 3 / span 3;
  }

  .row-span-4 {
    grid-row: span 4 / span 4;
  }

  .\!container {
    width: 100% !important;
  }

  @media (width >= 40rem) {
    .\!container {
      max-width: 40rem !important;
    }
  }

  @media (width >= 48rem) {
    .\!container {
      max-width: 48rem !important;
    }
  }

  @media (width >= 64rem) {
    .\!container {
      max-width: 64rem !important;
    }
  }

  @media (width >= 80rem) {
    .\!container {
      max-width: 80rem !important;
    }
  }

  @media (width >= 96rem) {
    .\!container {
      max-width: 96rem !important;
    }
  }

  .container {
    width: 100%;
  }

  @media (width >= 40rem) {
    .container {
      max-width: 40rem;
    }
  }

  @media (width >= 48rem) {
    .container {
      max-width: 48rem;
    }
  }

  @media (width >= 64rem) {
    .container {
      max-width: 64rem;
    }
  }

  @media (width >= 80rem) {
    .container {
      max-width: 80rem;
    }
  }

  @media (width >= 96rem) {
    .container {
      max-width: 96rem;
    }
  }

  .divider {
    white-space: nowrap;
    height: 1rem;
    margin: var(--divider-m, 1rem 0);
    --divider-color: var(--color-base-content);
    flex-direction: row;
    align-self: stretch;
    align-items: center;
    display: flex;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .divider {
      --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }

  .divider:before, .divider:after {
    content: "";
    background-color: var(--divider-color);
    flex-grow: 1;
    width: 100%;
    height: .125rem;
  }

  @media print {
    .divider:before, .divider:after {
      border: .5px solid;
    }
  }

  .divider:not(:empty) {
    gap: 1rem;
  }

  .m-29 {
    margin: calc(var(--spacing) * 29);
  }

  .m-29\.5 {
    margin: calc(var(--spacing) * 29.5);
  }

  .m-40 {
    margin: calc(var(--spacing) * 40);
  }

  .m-44 {
    margin: calc(var(--spacing) * 44);
  }

  .m-52 {
    margin: calc(var(--spacing) * 52);
  }

  .m-56 {
    margin: calc(var(--spacing) * 56);
  }

  .filter {
    flex-wrap: wrap;
    display: flex;
  }

  .filter input[type="radio"] {
    width: auto;
  }

  .filter input {
    opacity: 1;
    transition: margin .1s, opacity .3s, padding .3s, border-width .1s;
    overflow: hidden;
    scale: 1;
  }

  .filter input:not(:last-child) {
    margin-inline-end: .25rem;
  }

  .filter input.filter-reset {
    aspect-ratio: 1;
  }

  .filter input.filter-reset:after {
    content: "×";
  }

  .filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    opacity: 0;
    border-width: 0;
    width: 0;
    margin-inline: 0;
    padding-inline: 0;
    scale: 0;
  }

  .filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    opacity: 0;
    border-width: 0;
    width: 0;
    margin-inline: 0;
    padding-inline: 0;
    scale: 0;
  }

  .mx-auto {
    margin-inline: auto;
  }

  .my-2 {
    margin-block: calc(var(--spacing) * 2);
  }

  .my-3 {
    margin-block: calc(var(--spacing) * 3);
  }

  .my-10 {
    margin-block: calc(var(--spacing) * 10);
  }

  .label {
    white-space: nowrap;
    color: currentColor;
    align-items: center;
    gap: .375rem;
    display: inline-flex;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .label {
      color: color-mix(in oklab, currentColor 60%, transparent);
    }
  }

  .label:has(input) {
    cursor: pointer;
  }

  .label:is(.input > *, .select > *) {
    white-space: nowrap;
    height: calc(100% - .5rem);
    font-size: inherit;
    align-items: center;
    padding-inline: .75rem;
    display: flex;
  }

  .label:is(.input > *, .select > *):first-child {
    border-inline-end: var(--border) solid currentColor;
    margin-inline: -.75rem .75rem;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .label:is(.input > *, .select > *):first-child {
      border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
    }
  }

  .label:is(.input > *, .select > *):last-child {
    border-inline-start: var(--border) solid currentColor;
    margin-inline: .75rem -.75rem;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .label:is(.input > *, .select > *):last-child {
      border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
    }
  }

  .modal-action {
    justify-content: flex-end;
    gap: .5rem;
    margin-top: 1.5rem;
    display: flex;
  }

  .validator-hint {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
    margin-top: .5rem;
  }

  .mt-0 {
    margin-top: calc(var(--spacing) * 0);
  }

  .mt-0\.5 {
    margin-top: calc(var(--spacing) * .5);
  }

  .mt-1 {
    margin-top: calc(var(--spacing) * 1);
  }

  .mt-1\.5 {
    margin-top: calc(var(--spacing) * 1.5);
  }

  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }

  .mt-3 {
    margin-top: calc(var(--spacing) * 3);
  }

  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }

  .mt-5 {
    margin-top: calc(var(--spacing) * 5);
  }

  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }

  .mt-7 {
    margin-top: calc(var(--spacing) * 7);
  }

  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }

  .mt-10 {
    margin-top: calc(var(--spacing) * 10);
  }

  .mt-14 {
    margin-top: calc(var(--spacing) * 14);
  }

  .mt-16 {
    margin-top: calc(var(--spacing) * 16);
  }

  .mt-20 {
    margin-top: calc(var(--spacing) * 20);
  }

  .mt-32 {
    margin-top: calc(var(--spacing) * 32);
  }

  .mt-\[5rem\] {
    margin-top: 5rem;
  }

  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }

  .mb-3 {
    margin-bottom: calc(var(--spacing) * 3);
  }

  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }

  .mb-5 {
    margin-bottom: calc(var(--spacing) * 5);
  }

  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }

  .mb-8 {
    margin-bottom: calc(var(--spacing) * 8);
  }

  .mb-10 {
    margin-bottom: calc(var(--spacing) * 10);
  }

  .mb-12 {
    margin-bottom: calc(var(--spacing) * 12);
  }

  .mb-16 {
    margin-bottom: calc(var(--spacing) * 16);
  }

  .mb-20 {
    margin-bottom: calc(var(--spacing) * 20);
  }

  .ml-1 {
    margin-left: calc(var(--spacing) * 1);
  }

  .ml-5 {
    margin-left: calc(var(--spacing) * 5);
  }

  .status {
    aspect-ratio: 1;
    border-radius: var(--radius-selector);
    background-color: var(--color-base-content);
    vertical-align: middle;
    color: #0000004d;
    background-position: center;
    background-repeat: no-repeat;
    background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * .5)), #0000);
    width: .5rem;
    height: .5rem;
    display: inline-block;
    box-shadow: 0 2px 3px -1px;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .status {
      background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      color: #0000004d;
    }

    @supports (color: color-mix(in lab, red, red)) {
      .status {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
    }

    .status {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }

  .status\! {
    aspect-ratio: 1 !important;
    border-radius: var(--radius-selector) !important;
    background-color: var(--color-base-content) !important;
    vertical-align: middle !important;
    color: #0000004d !important;
    background-position: center !important;
    background-repeat: no-repeat !important;
    background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * .5)), #0000) !important;
    width: .5rem !important;
    height: .5rem !important;
    display: inline-block !important;
    box-shadow: 0 2px 3px -1px !important;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .status\! {
      background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent) !important;
      color: #0000004d !important;
    }

    @supports (color: color-mix(in lab, red, red)) {
      .status\! {
        color: color-mix(in oklab, var(--color-black) 30%, transparent) !important;
      }
    }

    .status\! {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000) !important;
    }
  }

  .badge {
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--badge-fg);
    border: var(--border) solid var(--badge-color, var(--color-base-200));
    width: fit-content;
    padding-inline: calc(.25rem * 3 - var(--border));
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--badge-bg);
    --badge-bg: var(--badge-color, var(--color-base-100));
    --badge-fg: var(--color-base-content);
    --size: calc(var(--size-selector, .25rem) * 6);
    height: var(--size);
    justify-content: center;
    align-items: center;
    gap: .5rem;
    font-size: .875rem;
    display: inline-flex;
  }

  .badge.badge-outline {
    --badge-fg: var(--badge-color);
    --badge-bg: #0000;
    background-image: none;
    border-color: currentColor;
  }

  .badge.badge-dash {
    --badge-fg: var(--badge-color);
    --badge-bg: #0000;
    background-image: none;
    border-style: dashed;
    border-color: currentColor;
  }

  .badge.badge-soft {
    color: var(--badge-color, var(--color-base-content));
    background-color: var(--badge-color, var(--color-base-content));
    border-color: var(--badge-color, var(--color-base-content));
    background-image: none;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .badge.badge-soft {
      background-color: color-mix(in oklab, var(--badge-color, var(--color-base-content)) 8%, var(--color-base-100));
      border-color: color-mix(in oklab, var(--badge-color, var(--color-base-content)) 10%, var(--color-base-100));
    }
  }

  .kbd {
    border-radius: var(--radius-field);
    background-color: var(--color-base-200);
    vertical-align: middle;
    border: var(--border) solid var(--color-base-content);
    border-bottom: calc(var(--border)  + 1px) solid var(--color-base-content);
    --size: calc(var(--size-selector, .25rem) * 6);
    height: var(--size);
    min-width: var(--size);
    justify-content: center;
    align-items: center;
    padding-left: .5em;
    padding-right: .5em;
    font-size: .875rem;
    display: inline-flex;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .kbd {
      border: var(--border) solid color-mix(in srgb, var(--color-base-content) 20%, #0000);
      border-bottom: calc(var(--border)  + 1px) solid color-mix(in srgb, var(--color-base-content) 20%, #0000);
    }
  }

  .tabs {
    --tabs-height: auto;
    --tabs-direction: row;
    height: var(--tabs-height);
    flex-wrap: wrap;
    flex-direction: var(--tabs-direction);
    display: flex;
  }

  .navbar {
    align-items: center;
    width: 100%;
    min-height: 4rem;
    padding: .5rem;
    display: flex;
  }

  .footer {
    grid-auto-flow: row;
    place-items: start;
    gap: 2.5rem 1rem;
    width: 100%;
    font-size: .875rem;
    line-height: 1.25rem;
    display: grid;
  }

  .footer > * {
    place-items: start;
    gap: .5rem;
    display: grid;
  }

  .footer.footer-center {
    text-align: center;
    grid-auto-flow: column dense;
    place-items: center;
  }

  .footer.footer-center > * {
    place-items: center;
  }

  .card-body {
    padding: var(--card-p, 1.5rem);
    font-size: var(--card-fs, .875rem);
    flex-direction: column;
    flex: auto;
    gap: .5rem;
    display: flex;
  }

  .card-body :where(p) {
    flex-grow: 1;
  }

  .alert {
    border-radius: var(--radius-box);
    color: var(--color-base-content);
    background-color: var(--alert-color, var(--color-base-200));
    text-align: start;
    border: var(--border) solid var(--color-base-200);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * .08)) inset, 0 1px #000, 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * .08));
    grid-template-columns: auto;
    grid-auto-flow: column;
    justify-content: start;
    place-items: center start;
    gap: 1rem;
    padding-block: .75rem;
    padding-inline: 1rem;
    font-size: .875rem;
    line-height: 1.25rem;
    display: grid;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .alert {
      box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * .08)) inset, 0 1px color-mix(in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * .08));
    }
  }

  .alert:has(:nth-child(2)) {
    grid-template-columns: auto minmax(auto, 1fr);
  }

  .alert.alert-outline {
    color: var(--alert-color);
    box-shadow: none;
    background-color: #0000;
    background-image: none;
  }

  .alert.alert-dash {
    color: var(--alert-color);
    box-shadow: none;
    background-color: #0000;
    background-image: none;
    border-style: dashed;
  }

  .alert.alert-soft {
    color: var(--alert-color, var(--color-base-content));
    background: var(--alert-color, var(--color-base-content));
    border-color: var(--alert-color, var(--color-base-content));
    box-shadow: none;
    background-image: none;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .alert.alert-soft {
      background: color-mix(in oklab, var(--alert-color, var(--color-base-content)) 8%, var(--color-base-100));
      border-color: color-mix(in oklab, var(--alert-color, var(--color-base-content)) 10%, var(--color-base-100));
    }
  }

  .fieldset {
    grid-template-columns: 1fr;
    grid-auto-rows: max-content;
    gap: .375rem;
    padding-block: .25rem;
    font-size: .75rem;
    display: grid;
  }

  .card-actions {
    flex-wrap: wrap;
    align-items: flex-start;
    gap: .5rem;
    display: flex;
  }

  .card-title {
    font-size: var(--cardtitle-fs, 1.125rem);
    align-items: center;
    gap: .5rem;
    font-weight: 600;
    display: flex;
  }

  .join {
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
    align-items: stretch;
    display: inline-flex;
  }

  .join :where(.join-item) {
    border-start-start-radius: var(--join-ss, 0);
    border-start-end-radius: var(--join-se, 0);
    border-end-end-radius: var(--join-ee, 0);
    border-end-start-radius: var(--join-es, 0);
  }

  .join :where(.join-item) * {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }

  .join > .join-item:where(:first-child) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }

  .join :first-child:not(:last-child) :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }

  .join > .join-item:where(:last-child) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }

  .join :last-child:not(:first-child) :where(.join-item) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }

  .join > .join-item:where(:only-child) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }

  .join :only-child :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }

  .chat {
    column-gap: .75rem;
    padding-block: .25rem;
    display: grid;
  }

  .line-clamp-2 {
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    display: -webkit-box;
    overflow: hidden;
  }

  :root .prose {
    --tw-prose-body: var(--color-base-content);
    --tw-prose-headings: var(--color-base-content);
    --tw-prose-lead: var(--color-base-content);
    --tw-prose-links: var(--color-base-content);
    --tw-prose-bold: var(--color-base-content);
    --tw-prose-counters: var(--color-base-content);
    --tw-prose-bullets: var(--color-base-content);
    --tw-prose-hr: var(--color-base-content);
    --tw-prose-quotes: var(--color-base-content);
    --tw-prose-quote-borders: var(--color-base-content);
    --tw-prose-captions: var(--color-base-content);
    --tw-prose-code: var(--color-base-content);
    --tw-prose-pre-code: var(--color-neutral-content);
    --tw-prose-pre-bg: var(--color-neutral);
    --tw-prose-th-borders: var(--color-base-content);
    --tw-prose-td-borders: var(--color-base-content);
    --tw-prose-kbd: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-body: color-mix(in oklab, var(--color-base-content) 80%, #0000);
      --tw-prose-bullets: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      --tw-prose-quote-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      --tw-prose-captions: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      --tw-prose-th-borders: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      --tw-prose-td-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
  }

  :root .prose :where(code):not(pre > code) {
    background-color: var(--color-base-200);
    border-radius: var(--radius-selector);
    border: var(--border) solid var(--color-base-300);
    font-weight: inherit;
    padding-inline: .5em;
  }

  :root .prose :where(code):not(pre > code):before, :root .prose :where(code):not(pre > code):after {
    display: none;
  }

  .mask {
    vertical-align: middle;
    display: inline-block;
    mask-position: center;
    mask-size: contain;
    mask-repeat: no-repeat;
  }

  .block {
    display: block;
  }

  .block\! {
    display: block !important;
  }

  .contents {
    display: contents;
  }

  .flex {
    display: flex;
  }

  .flow-root {
    display: flow-root;
  }

  .grid {
    display: grid;
  }

  .hidden {
    display: none;
  }

  .inline {
    display: inline;
  }

  .inline-block {
    display: inline-block;
  }

  .inline-flex {
    display: inline-flex;
  }

  .inline-grid {
    display: inline-grid;
  }

  .inline-table {
    display: inline-table;
  }

  .list-item {
    display: list-item;
  }

  .table {
    display: table;
  }

  .table-caption {
    display: table-caption;
  }

  .table-cell {
    display: table-cell;
  }

  .table-column {
    display: table-column;
  }

  .table-column-group {
    display: table-column-group;
  }

  .table-footer-group {
    display: table-footer-group;
  }

  .table-header-group {
    display: table-header-group;
  }

  .table-row {
    display: table-row;
  }

  .table-row-group {
    display: table-row-group;
  }

  .aspect-square {
    aspect-ratio: 1;
  }

  .btn-circle {
    width: var(--size);
    height: var(--size);
    border-radius: 3.40282e38px;
    padding-inline: 0;
  }

  .btn-square {
    width: var(--size);
    height: var(--size);
    padding-inline: 0;
  }

  .size-3 {
    width: calc(var(--spacing) * 3);
    height: calc(var(--spacing) * 3);
  }

  .size-8 {
    width: calc(var(--spacing) * 8);
    height: calc(var(--spacing) * 8);
  }

  .size-9 {
    width: calc(var(--spacing) * 9);
    height: calc(var(--spacing) * 9);
  }

  .size-full {
    width: 100%;
    height: 100%;
  }

  .h-1 {
    height: calc(var(--spacing) * 1);
  }

  .h-1\.5 {
    height: calc(var(--spacing) * 1.5);
  }

  .h-2 {
    height: calc(var(--spacing) * 2);
  }

  .h-4 {
    height: calc(var(--spacing) * 4);
  }

  .h-5 {
    height: calc(var(--spacing) * 5);
  }

  .h-8 {
    height: calc(var(--spacing) * 8);
  }

  .h-9 {
    height: calc(var(--spacing) * 9);
  }

  .h-10 {
    height: calc(var(--spacing) * 10);
  }

  .h-12 {
    height: calc(var(--spacing) * 12);
  }

  .h-14 {
    height: calc(var(--spacing) * 14);
  }

  .h-32 {
    height: calc(var(--spacing) * 32);
  }

  .h-44 {
    height: calc(var(--spacing) * 44);
  }

  .h-56 {
    height: calc(var(--spacing) * 56);
  }

  .h-\[9rem\] {
    height: 9rem;
  }

  .h-\[10rem\] {
    height: 10rem;
  }

  .h-\[23rem\] {
    height: 23rem;
  }

  .h-\[26rem\] {
    height: 26rem;
  }

  .h-\[var\(--radix-navigation-menu-viewport-height\)\] {
    height: var(--radix-navigation-menu-viewport-height);
  }

  .h-full {
    height: 100%;
  }

  .h-screen {
    height: 100vh;
  }

  .min-h-screen {
    min-height: 100vh;
  }

  .btn-wide {
    width: 100%;
    max-width: 16rem;
  }

  .btn-block {
    width: 100%;
  }

  .loading-lg {
    width: calc(var(--size-selector, .25rem) * 7);
  }

  .loading-md {
    width: calc(var(--size-selector, .25rem) * 6);
  }

  .w-1 {
    width: calc(var(--spacing) * 1);
  }

  .w-2 {
    width: calc(var(--spacing) * 2);
  }

  .w-4 {
    width: calc(var(--spacing) * 4);
  }

  .w-5 {
    width: calc(var(--spacing) * 5);
  }

  .w-8 {
    width: calc(var(--spacing) * 8);
  }

  .w-10 {
    width: calc(var(--spacing) * 10);
  }

  .w-12 {
    width: calc(var(--spacing) * 12);
  }

  .w-14 {
    width: calc(var(--spacing) * 14);
  }

  .w-20 {
    width: calc(var(--spacing) * 20);
  }

  .w-32 {
    width: calc(var(--spacing) * 32);
  }

  .w-52 {
    width: calc(var(--spacing) * 52);
  }

  .w-66 {
    width: calc(var(--spacing) * 66);
  }

  .w-\[45rem\] {
    width: 45rem;
  }

  .w-\[70\%\] {
    width: 70%;
  }

  .w-\[75\%\] {
    width: 75%;
  }

  .w-\[80\%\] {
    width: 80%;
  }

  .w-\[85\%\] {
    width: 85%;
  }

  .w-\[90\%\] {
    width: 90%;
  }

  .w-\[100\%\] {
    width: 100%;
  }

  .w-fit {
    width: fit-content;
  }

  .w-full {
    width: 100%;
  }

  .w-max {
    width: max-content;
  }

  .max-w-2xl {
    max-width: var(--container-2xl);
  }

  .max-w-4xl {
    max-width: var(--container-4xl);
  }

  .max-w-6xl {
    max-width: var(--container-6xl);
  }

  .max-w-7xl {
    max-width: var(--container-7xl);
  }

  .max-w-\[calc\(100\%-2rem\)\] {
    max-width: calc(100% - 2rem);
  }

  .max-w-max {
    max-width: max-content;
  }

  .max-w-xs {
    max-width: var(--container-xs);
  }

  .flex-1 {
    flex: 1;
  }

  .flex-none {
    flex: none;
  }

  .flex-shrink, .shrink {
    flex-shrink: 1;
  }

  .shrink-0 {
    flex-shrink: 0;
  }

  .flex-grow, .grow {
    flex-grow: 1;
  }

  .border-collapse {
    border-collapse: collapse;
  }

  .-translate-x-16 {
    --tw-translate-x: calc(var(--spacing) * -16);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .translate-x-12 {
    --tw-translate-x: calc(var(--spacing) * 12);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .translate-x-\[-50\%\] {
    --tw-translate-x: -50%;
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .-translate-y-1 {
    --tw-translate-y: calc(var(--spacing) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .-translate-y-10 {
    --tw-translate-y: calc(var(--spacing) * -10);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .translate-y-4 {
    --tw-translate-y: calc(var(--spacing) * 4);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .translate-y-\[-50\%\] {
    --tw-translate-y: -50%;
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .translate-none {
    translate: none;
  }

  .scale-95 {
    --tw-scale-x: 95%;
    --tw-scale-y: 95%;
    --tw-scale-z: 95%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
  }

  .scale-3d {
    scale: var(--tw-scale-x) var(--tw-scale-y) var(--tw-scale-z);
  }

  .rotate-45 {
    rotate: 45deg;
  }

  .rotate-180 {
    rotate: 180deg;
  }

  .transform {
    transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );
  }

  .skeleton {
    border-radius: var(--radius-box);
    background-color: var(--color-base-300);
    will-change: background-position;
    background-image: linear-gradient(105deg, #0000 0% 40%, var(--color-base-100) 50%, #0000 60% 100%);
    background-position-x: -50%;
    background-repeat: no-repeat;
    background-size: 200%;
    animation: 1.8s ease-in-out infinite skeleton;
  }

  @media (prefers-reduced-motion: reduce) {
    .skeleton {
      transition-duration: 15s;
    }
  }

  .link {
    cursor: pointer;
    text-decoration-line: underline;
  }

  .link:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .link:focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .link:focus-visible {
    outline-offset: 2px;
    outline: 2px solid;
  }

  .cursor-pointer {
    cursor: pointer;
  }

  .touch-pinch-zoom {
    --tw-pinch-zoom: pinch-zoom;
    touch-action: var(--tw-pan-x, ) var(--tw-pan-y, ) var(--tw-pinch-zoom, );
  }

  .resize {
    resize: both;
  }

  .resize-none {
    resize: none;
  }

  .list-none {
    list-style-type: none;
  }

  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  .grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  .grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }

  .grid-cols-5 {
    grid-template-columns: repeat(5, minmax(0, 1fr));
  }

  .grid-cols-6 {
    grid-template-columns: repeat(6, minmax(0, 1fr));
  }

  .grid-cols-12 {
    grid-template-columns: repeat(12, minmax(0, 1fr));
  }

  .grid-rows-2 {
    grid-template-rows: repeat(2, minmax(0, 1fr));
  }

  .grid-rows-3 {
    grid-template-rows: repeat(3, minmax(0, 1fr));
  }

  .grid-rows-6 {
    grid-template-rows: repeat(6, minmax(0, 1fr));
  }

  .grid-rows-7 {
    grid-template-rows: repeat(7, minmax(0, 1fr));
  }

  .flex-col {
    flex-direction: column;
  }

  .flex-col-reverse {
    flex-direction: column-reverse;
  }

  .flex-row-reverse {
    flex-direction: row-reverse;
  }

  .flex-wrap {
    flex-wrap: wrap;
  }

  .items-center {
    align-items: center;
  }

  .items-end {
    align-items: flex-end;
  }

  .items-start {
    align-items: flex-start;
  }

  .justify-between {
    justify-content: space-between;
  }

  .justify-center {
    justify-content: center;
  }

  .justify-end {
    justify-content: flex-end;
  }

  .justify-evenly {
    justify-content: space-evenly;
  }

  .gap-1 {
    gap: calc(var(--spacing) * 1);
  }

  .gap-1\.5 {
    gap: calc(var(--spacing) * 1.5);
  }

  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }

  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }

  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }

  .gap-5 {
    gap: calc(var(--spacing) * 5);
  }

  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }

  .gap-20 {
    gap: calc(var(--spacing) * 20);
  }

  :where(.space-y-reverse > :not(:last-child)) {
    --tw-space-y-reverse: 1;
  }

  :where(.space-x-2 > :not(:last-child)) {
    --tw-space-x-reverse: 0;
    margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse));
    margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse)));
  }

  :where(.space-x-3 > :not(:last-child)) {
    --tw-space-x-reverse: 0;
    margin-inline-start: calc(calc(var(--spacing) * 3) * var(--tw-space-x-reverse));
    margin-inline-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-x-reverse)));
  }

  :where(.space-x-reverse > :not(:last-child)) {
    --tw-space-x-reverse: 1;
  }

  :where(.divide-x > :not(:last-child)) {
    --tw-divide-x-reverse: 0;
    border-inline-style: var(--tw-border-style);
    border-inline-start-width: calc(1px * var(--tw-divide-x-reverse));
    border-inline-end-width: calc(1px * calc(1 - var(--tw-divide-x-reverse)));
  }

  :where(.divide-y > :not(:last-child)) {
    --tw-divide-y-reverse: 0;
    border-bottom-style: var(--tw-border-style);
    border-top-style: var(--tw-border-style);
    border-top-width: calc(1px * var(--tw-divide-y-reverse));
    border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
  }

  :where(.divide-y-reverse > :not(:last-child)) {
    --tw-divide-y-reverse: 1;
  }

  .truncate {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
  }

  .overflow-hidden {
    overflow: hidden;
  }

  .overflow-x-auto {
    overflow-x: auto;
  }

  .menu-sm :where(li:not(.menu-title) > :not(ul, details, .menu-title)), .menu-sm :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
    border-radius: var(--radius-field);
    padding-block: .25rem;
    padding-inline: .625rem;
    font-size: .75rem;
  }

  .menu-sm .menu-title {
    padding-block: .5rem;
    padding-inline: .75rem;
  }

  .rounded {
    border-radius: .25rem;
  }

  .rounded-2xl {
    border-radius: var(--radius-2xl);
  }

  .rounded-box {
    border-radius: var(--radius-box);
    border-radius: var(--radius-box);
  }

  .rounded-full {
    border-radius: 3.40282e38px;
  }

  .rounded-lg {
    border-radius: var(--radius-lg);
  }

  .rounded-md {
    border-radius: var(--radius-md);
  }

  .rounded-sm {
    border-radius: var(--radius-sm);
  }

  .rounded-xl {
    border-radius: var(--radius-xl);
  }

  .rounded-xs {
    border-radius: var(--radius-xs);
  }

  .rounded-s {
    border-start-start-radius: .25rem;
    border-end-start-radius: .25rem;
  }

  .rounded-ss {
    border-start-start-radius: .25rem;
  }

  .rounded-e {
    border-start-end-radius: .25rem;
    border-end-end-radius: .25rem;
  }

  .rounded-se {
    border-start-end-radius: .25rem;
  }

  .rounded-ee {
    border-end-end-radius: .25rem;
  }

  .rounded-es {
    border-end-start-radius: .25rem;
  }

  .rounded-t {
    border-top-left-radius: .25rem;
    border-top-right-radius: .25rem;
  }

  .rounded-l {
    border-top-left-radius: .25rem;
    border-bottom-left-radius: .25rem;
  }

  .rounded-l-2xl {
    border-top-left-radius: var(--radius-2xl);
    border-bottom-left-radius: var(--radius-2xl);
  }

  .rounded-tl {
    border-top-left-radius: .25rem;
  }

  .rounded-tl-2xl {
    border-top-left-radius: var(--radius-2xl);
  }

  .rounded-tl-sm {
    border-top-left-radius: var(--radius-sm);
  }

  .rounded-r {
    border-top-right-radius: .25rem;
    border-bottom-right-radius: .25rem;
  }

  .rounded-r-2xl {
    border-top-right-radius: var(--radius-2xl);
    border-bottom-right-radius: var(--radius-2xl);
  }

  .rounded-tr {
    border-top-right-radius: .25rem;
  }

  .rounded-b {
    border-bottom-right-radius: .25rem;
    border-bottom-left-radius: .25rem;
  }

  .rounded-br {
    border-bottom-right-radius: .25rem;
  }

  .rounded-bl {
    border-bottom-left-radius: .25rem;
  }

  .rounded-bl-2xl {
    border-bottom-left-radius: var(--radius-2xl);
  }

  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }

  .border-2 {
    border-style: var(--tw-border-style);
    border-width: 2px;
  }

  .border-x {
    border-inline-style: var(--tw-border-style);
    border-inline-width: 1px;
  }

  .border-y {
    border-block-style: var(--tw-border-style);
    border-block-width: 1px;
  }

  .border-s {
    border-inline-start-style: var(--tw-border-style);
    border-inline-start-width: 1px;
  }

  .border-e {
    border-inline-end-style: var(--tw-border-style);
    border-inline-end-width: 1px;
  }

  .border-t {
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
  }

  .border-r {
    border-right-style: var(--tw-border-style);
    border-right-width: 1px;
  }

  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }

  .border-l {
    border-left-style: var(--tw-border-style);
    border-left-width: 1px;
  }

  .btn-dash:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-fg: var(--btn-color);
    --btn-border: var(--btn-color);
    --btn-noise: none;
    border-style: dashed;
  }

  .border-none {
    --tw-border-style: none;
    border-style: none;
  }

  .border-black {
    border-color: var(--color-black);
  }

  .border-black\/10 {
    border-color: #0000001a;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .border-black\/10 {
      border-color: color-mix(in oklab, var(--color-black) 10%, transparent);
    }
  }

  .border-black\/15 {
    border-color: #00000026;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .border-black\/15 {
      border-color: color-mix(in oklab, var(--color-black) 15%, transparent);
    }
  }

  .border-black\/20 {
    border-color: #0003;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .border-black\/20 {
      border-color: color-mix(in oklab, var(--color-black) 20%, transparent);
    }
  }

  .border-black\/30 {
    border-color: #0000004d;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .border-black\/30 {
      border-color: color-mix(in oklab, var(--color-black) 30%, transparent);
    }
  }

  .border-gray-100 {
    border-color: var(--color-gray-100);
  }

  .border-white {
    border-color: var(--color-white);
  }

  .bg-\[\#2B3440\] {
    background-color: #2b3440;
  }

  .bg-\[\#3b82f6\]\/10 {
    background-color: oklab(62.3083% -.0332476 -.185052 / .1);
  }

  .bg-\[\#06b6d4\]\/10 {
    background-color: oklab(71.4837% -.102719 -.0725165 / .1);
  }

  .bg-\[\#22c55e\]\/10 {
    background-color: oklab(72.2746% -.165574 .0972219 / .1);
  }

  .bg-\[\#191A23\] {
    background-color: #191a23;
  }

  .bg-\[\#212121\] {
    background-color: #212121;
  }

  .bg-\[\#E8252E\] {
    background-color: #e8252e;
  }

  .bg-\[\#FF2727\] {
    background-color: #ff2727;
  }

  .bg-\[\#a855f7\]\/10 {
    background-color: oklab(62.6846% .129701 -.193012 / .1);
  }

  .bg-\[white\] {
    background-color: #fff;
  }

  .bg-base-100 {
    background-color: var(--color-base-100);
  }

  .bg-black {
    background-color: var(--color-black);
  }

  .bg-black\/50 {
    background-color: #00000080;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .bg-black\/50 {
      background-color: color-mix(in oklab, var(--color-black) 50%, transparent);
    }
  }

  .bg-black\/75 {
    background-color: #000000bf;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .bg-black\/75 {
      background-color: color-mix(in oklab, var(--color-black) 75%, transparent);
    }
  }

  .bg-black\/80 {
    background-color: #000c;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .bg-black\/80 {
      background-color: color-mix(in oklab, var(--color-black) 80%, transparent);
    }
  }

  .bg-gray-100 {
    background-color: var(--color-gray-100);
  }

  .bg-gray-800 {
    background-color: var(--color-gray-800);
  }

  .bg-primary {
    background-color: var(--color-primary);
  }

  .bg-red-400 {
    background-color: var(--color-red-400);
  }

  .bg-red-500 {
    background-color: var(--color-red-500);
  }

  .bg-secondary {
    background-color: var(--color-secondary);
  }

  .bg-white {
    background-color: var(--color-white);
  }

  .bg-gradient-to-b {
    --tw-gradient-position: to bottom in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }

  .bg-gradient-to-br {
    --tw-gradient-position: to bottom right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }

  .bg-\[url\(\'https\:\/\/img\.freepik\.com\/free-photo\/margarita-pizza-with-tomato-olive-basil-top-view_141793-2381\.jpg\?t\=st\=1734794330\~exp\=1734797930\~hmac\=a89434674ccb82e68af71c7e840ba0fdc5cc1f8a28deee8524bfd81eefb904c0\&w\=900\'\)\] {
    background-image: url("https://img.freepik.com/free-photo/margarita-pizza-with-tomato-olive-basil-top-view_141793-2381.jpg?t=st=1734794330~exp=1734797930~hmac=a89434674ccb82e68af71c7e840ba0fdc5cc1f8a28deee8524bfd81eefb904c0&w=900");
  }

  .bg-\[url\(\'https\:\/\/img\.freepik\.com\/free-photo\/side-view-fried-meat-with-french-fries-ketchup_141793-4908\.jpg\?t\=st\=1735155958\~exp\=1735159558\~hmac\=ac21c60014a4072f8e1d91e378ef64e152b728427161ad87a667522bccdc449b\&w\=900\'\)\] {
    background-image: url("https://img.freepik.com/free-photo/side-view-fried-meat-with-french-fries-ketchup_141793-4908.jpg?t=st=1735155958~exp=1735159558~hmac=ac21c60014a4072f8e1d91e378ef64e152b728427161ad87a667522bccdc449b&w=900");
  }

  .from-\[\#3b82f6\] {
    --tw-gradient-from: #3b82f6;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .from-\[\#06b6d4\] {
    --tw-gradient-from: #06b6d4;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .from-\[\#22c55e\] {
    --tw-gradient-from: #22c55e;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .from-\[\#3871FF\] {
    --tw-gradient-from: #3871ff;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .from-\[\#9642e4\] {
    --tw-gradient-from: #9642e4;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .from-\[\#E8252E\] {
    --tw-gradient-from: #e8252e;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .from-gray-50 {
    --tw-gradient-from: var(--color-gray-50);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-\[\#3036CC\] {
    --tw-gradient-to: #3036cc;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-\[\#eb3e46\] {
    --tw-gradient-to: #eb3e46;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-blue-300 {
    --tw-gradient-to: var(--color-blue-300);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-blue-400 {
    --tw-gradient-to: var(--color-blue-400);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-cyan-300 {
    --tw-gradient-to: var(--color-cyan-300);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-cyan-400 {
    --tw-gradient-to: var(--color-cyan-400);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-green-300 {
    --tw-gradient-to: var(--color-green-300);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-green-400 {
    --tw-gradient-to: var(--color-green-400);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-purple-300 {
    --tw-gradient-to: var(--color-purple-300);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-purple-400 {
    --tw-gradient-to: var(--color-purple-400);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-white {
    --tw-gradient-to: var(--color-white);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .loading-spinner {
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
  }

  .bg-cover {
    background-size: cover;
  }

  .bg-center {
    background-position: center;
  }

  .bg-repeat {
    background-repeat: repeat;
  }

  .mask-no-clip {
    mask-clip: no-clip;
  }

  .mask-repeat {
    mask-repeat: repeat;
  }

  .object-cover {
    object-fit: cover;
  }

  .p-0 {
    padding: calc(var(--spacing) * 0);
  }

  .p-2 {
    padding: calc(var(--spacing) * 2);
  }

  .p-3 {
    padding: calc(var(--spacing) * 3);
  }

  .p-4 {
    padding: calc(var(--spacing) * 4);
  }

  .p-5 {
    padding: calc(var(--spacing) * 5);
  }

  .p-6 {
    padding: calc(var(--spacing) * 6);
  }

  .p-8 {
    padding: calc(var(--spacing) * 8);
  }

  .menu-title {
    color: var(--color-base-content);
    padding-block: .5rem;
    padding-inline: .75rem;
    font-size: .875rem;
    font-weight: 600;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .menu-title {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }

  .badge-sm {
    --size: calc(var(--size-selector, .25rem) * 5);
    padding-inline: calc(.25rem * 2.5 - var(--border));
    font-size: .75rem;
  }

  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }

  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }

  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }

  .px-5 {
    padding-inline: calc(var(--spacing) * 5);
  }

  .px-6 {
    padding-inline: calc(var(--spacing) * 6);
  }

  .px-8 {
    padding-inline: calc(var(--spacing) * 8);
  }

  .px-10 {
    padding-inline: calc(var(--spacing) * 10);
  }

  .px-16 {
    padding-inline: calc(var(--spacing) * 16);
  }

  .py-1 {
    padding-block: calc(var(--spacing) * 1);
  }

  .py-1\.5 {
    padding-block: calc(var(--spacing) * 1.5);
  }

  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }

  .py-2\.5 {
    padding-block: calc(var(--spacing) * 2.5);
  }

  .py-3 {
    padding-block: calc(var(--spacing) * 3);
  }

  .py-4 {
    padding-block: calc(var(--spacing) * 4);
  }

  .py-5 {
    padding-block: calc(var(--spacing) * 5);
  }

  .py-7 {
    padding-block: calc(var(--spacing) * 7);
  }

  .py-8 {
    padding-block: calc(var(--spacing) * 8);
  }

  .py-10 {
    padding-block: calc(var(--spacing) * 10);
  }

  .py-12 {
    padding-block: calc(var(--spacing) * 12);
  }

  .py-16 {
    padding-block: calc(var(--spacing) * 16);
  }

  .py-20 {
    padding-block: calc(var(--spacing) * 20);
  }

  .pt-2 {
    padding-top: calc(var(--spacing) * 2);
  }

  .pt-5 {
    padding-top: calc(var(--spacing) * 5);
  }

  .pt-8 {
    padding-top: calc(var(--spacing) * 8);
  }

  .pt-10 {
    padding-top: calc(var(--spacing) * 10);
  }

  .pt-16 {
    padding-top: calc(var(--spacing) * 16);
  }

  .pt-20 {
    padding-top: calc(var(--spacing) * 20);
  }

  .pt-32 {
    padding-top: calc(var(--spacing) * 32);
  }

  .pr-2 {
    padding-right: calc(var(--spacing) * 2);
  }

  .pr-2\.5 {
    padding-right: calc(var(--spacing) * 2.5);
  }

  .pb-5 {
    padding-bottom: calc(var(--spacing) * 5);
  }

  .pb-10 {
    padding-bottom: calc(var(--spacing) * 10);
  }

  .pb-14 {
    padding-bottom: calc(var(--spacing) * 14);
  }

  .pb-20 {
    padding-bottom: calc(var(--spacing) * 20);
  }

  .pb-32 {
    padding-bottom: calc(var(--spacing) * 32);
  }

  .text-center {
    text-align: center;
  }

  .text-left {
    text-align: left;
  }

  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }

  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }

  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }

  .text-5xl {
    font-size: var(--text-5xl);
    line-height: var(--tw-leading, var(--text-5xl--line-height));
  }

  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }

  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }

  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }

  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }

  .text-\[9px\] {
    font-size: 9px;
  }

  .leading-none {
    --tw-leading: 1;
    line-height: 1;
  }

  .leading-relaxed {
    --tw-leading: var(--leading-relaxed);
    line-height: var(--leading-relaxed);
  }

  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }

  .font-light {
    --tw-font-weight: var(--font-weight-light);
    font-weight: var(--font-weight-light);
  }

  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }

  .font-normal {
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
  }

  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }

  .tracking-tight {
    --tw-tracking: var(--tracking-tight);
    letter-spacing: var(--tracking-tight);
  }

  .text-wrap {
    text-wrap: wrap;
  }

  .text-clip {
    text-overflow: clip;
  }

  .text-ellipsis {
    text-overflow: ellipsis;
  }

  .whitespace-nowrap {
    white-space: nowrap;
  }

  .text-\[\#E8252E\] {
    color: #e8252e;
  }

  .text-\[\#FF2727\], .text-\[\#ff2727\] {
    color: #ff2727;
  }

  .text-amber-400 {
    color: var(--color-amber-400);
  }

  .text-black {
    color: var(--color-black);
  }

  .text-black\/60 {
    color: #0009;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .text-black\/60 {
      color: color-mix(in oklab, var(--color-black) 60%, transparent);
    }
  }

  .text-black\/80 {
    color: #000c;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .text-black\/80 {
      color: color-mix(in oklab, var(--color-black) 80%, transparent);
    }
  }

  .text-gray-600 {
    color: var(--color-gray-600);
  }

  .text-gray-800 {
    color: var(--color-gray-800);
  }

  .text-gray-900 {
    color: var(--color-gray-900);
  }

  .text-info {
    color: var(--color-info);
  }

  .text-primary {
    color: var(--color-primary);
  }

  .text-red-400 {
    color: var(--color-red-400);
  }

  .text-red-600 {
    color: var(--color-red-600);
  }

  .text-white {
    color: var(--color-white);
  }

  .capitalize {
    text-transform: capitalize;
  }

  .lowercase {
    text-transform: lowercase;
  }

  .normal-case {
    text-transform: none;
  }

  .uppercase {
    text-transform: uppercase;
  }

  .italic {
    font-style: italic;
  }

  .not-italic {
    font-style: normal;
  }

  .diagonal-fractions {
    --tw-numeric-fraction: diagonal-fractions;
    font-variant-numeric: var(--tw-ordinal, ) var(--tw-slashed-zero, ) var(--tw-numeric-figure, ) var(--tw-numeric-spacing, ) var(--tw-numeric-fraction, );
  }

  .lining-nums {
    --tw-numeric-figure: lining-nums;
    font-variant-numeric: var(--tw-ordinal, ) var(--tw-slashed-zero, ) var(--tw-numeric-figure, ) var(--tw-numeric-spacing, ) var(--tw-numeric-fraction, );
  }

  .oldstyle-nums {
    --tw-numeric-figure: oldstyle-nums;
    font-variant-numeric: var(--tw-ordinal, ) var(--tw-slashed-zero, ) var(--tw-numeric-figure, ) var(--tw-numeric-spacing, ) var(--tw-numeric-fraction, );
  }

  .ordinal {
    --tw-ordinal: ordinal;
    font-variant-numeric: var(--tw-ordinal, ) var(--tw-slashed-zero, ) var(--tw-numeric-figure, ) var(--tw-numeric-spacing, ) var(--tw-numeric-fraction, );
  }

  .proportional-nums {
    --tw-numeric-spacing: proportional-nums;
    font-variant-numeric: var(--tw-ordinal, ) var(--tw-slashed-zero, ) var(--tw-numeric-figure, ) var(--tw-numeric-spacing, ) var(--tw-numeric-fraction, );
  }

  .slashed-zero {
    --tw-slashed-zero: slashed-zero;
    font-variant-numeric: var(--tw-ordinal, ) var(--tw-slashed-zero, ) var(--tw-numeric-figure, ) var(--tw-numeric-spacing, ) var(--tw-numeric-fraction, );
  }

  .stacked-fractions {
    --tw-numeric-fraction: stacked-fractions;
    font-variant-numeric: var(--tw-ordinal, ) var(--tw-slashed-zero, ) var(--tw-numeric-figure, ) var(--tw-numeric-spacing, ) var(--tw-numeric-fraction, );
  }

  .tabular-nums {
    --tw-numeric-spacing: tabular-nums;
    font-variant-numeric: var(--tw-ordinal, ) var(--tw-slashed-zero, ) var(--tw-numeric-figure, ) var(--tw-numeric-spacing, ) var(--tw-numeric-fraction, );
  }

  .normal-nums {
    font-variant-numeric: normal;
  }

  .btn-link {
    --btn-border: #0000;
    --btn-bg: #0000;
    --btn-fg: var(--color-primary);
    --btn-noise: none;
    --btn-shadow: "";
    outline-color: currentColor;
    text-decoration-line: underline;
  }

  .btn-link:is(.btn-active, :hover, :active:focus, :focus-visible) {
    --btn-border: #0000;
    --btn-bg: #0000;
    text-decoration-line: underline;
  }

  .line-through {
    text-decoration-line: line-through;
  }

  .no-underline {
    text-decoration-line: none;
  }

  .overline {
    text-decoration-line: overline;
  }

  .underline {
    text-decoration-line: underline;
  }

  .underline-offset-4 {
    text-underline-offset: 4px;
  }

  .antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .subpixel-antialiased {
    -webkit-font-smoothing: auto;
    -moz-osx-font-smoothing: auto;
  }

  .opacity-0 {
    opacity: 0;
  }

  .opacity-20 {
    opacity: .2;
  }

  .opacity-70 {
    opacity: .7;
  }

  .opacity-100 {
    opacity: 1;
  }

  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, #0000001a), 0 1px 2px -1px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-2xl {
    --tw-shadow: 0 25px 50px -12px var(--tw-shadow-color, #00000040);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, #0000001a), 0 4px 6px -4px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-md {
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, #0000001a), 0 2px 4px -2px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-sm {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, #0000001a), 0 1px 2px -1px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-xl {
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, #0000001a), 0 8px 10px -6px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-xs {
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, #0000000d);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .ring {
    --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .ring-4 {
    --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .inset-ring {
    --tw-inset-ring-shadow: inset 0 0 0 1px var(--tw-inset-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .ring-red-50 {
    --tw-ring-color: var(--color-red-50);
  }

  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }

  .btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-border: #0000;
    --btn-noise: none;
  }

  .btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible):not(:disabled, [disabled], .btn-disabled) {
    --btn-fg: currentColor;
    outline-color: currentColor;
  }

  .blur {
    --tw-blur: blur(8px);
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .drop-shadow {
    --tw-drop-shadow-size: drop-shadow(0 1px 2px var(--tw-drop-shadow-color, #0000001a)) drop-shadow(0 1px 1px var(--tw-drop-shadow-color, #0000000f));
    --tw-drop-shadow: drop-shadow(0 1px 2px #0000001a) drop-shadow(0 1px 1px #0000000f);
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .drop-shadow-xl {
    --tw-drop-shadow-size: drop-shadow(0 9px 7px var(--tw-drop-shadow-color, #0000001a));
    --tw-drop-shadow: drop-shadow(var(--drop-shadow-xl));
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .grayscale {
    --tw-grayscale: grayscale(100%);
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .invert {
    --tw-invert: invert(100%);
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .sepia {
    --tw-sepia: sepia(100%);
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .filter {
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .backdrop-blur {
    --tw-backdrop-blur: blur(8px);
    backdrop-filter: var(--tw-backdrop-blur, ) var(--tw-backdrop-brightness, ) var(--tw-backdrop-contrast, ) var(--tw-backdrop-grayscale, ) var(--tw-backdrop-hue-rotate, ) var(--tw-backdrop-invert, ) var(--tw-backdrop-opacity, ) var(--tw-backdrop-saturate, ) var(--tw-backdrop-sepia, );
  }

  .backdrop-grayscale {
    --tw-backdrop-grayscale: grayscale(100%);
    backdrop-filter: var(--tw-backdrop-blur, ) var(--tw-backdrop-brightness, ) var(--tw-backdrop-contrast, ) var(--tw-backdrop-grayscale, ) var(--tw-backdrop-hue-rotate, ) var(--tw-backdrop-invert, ) var(--tw-backdrop-opacity, ) var(--tw-backdrop-saturate, ) var(--tw-backdrop-sepia, );
  }

  .backdrop-invert {
    --tw-backdrop-invert: invert(100%);
    backdrop-filter: var(--tw-backdrop-blur, ) var(--tw-backdrop-brightness, ) var(--tw-backdrop-contrast, ) var(--tw-backdrop-grayscale, ) var(--tw-backdrop-hue-rotate, ) var(--tw-backdrop-invert, ) var(--tw-backdrop-opacity, ) var(--tw-backdrop-saturate, ) var(--tw-backdrop-sepia, );
  }

  .backdrop-sepia {
    --tw-backdrop-sepia: sepia(100%);
    backdrop-filter: var(--tw-backdrop-blur, ) var(--tw-backdrop-brightness, ) var(--tw-backdrop-contrast, ) var(--tw-backdrop-grayscale, ) var(--tw-backdrop-hue-rotate, ) var(--tw-backdrop-invert, ) var(--tw-backdrop-opacity, ) var(--tw-backdrop-saturate, ) var(--tw-backdrop-sepia, );
  }

  .backdrop-filter {
    backdrop-filter: var(--tw-backdrop-blur, ) var(--tw-backdrop-brightness, ) var(--tw-backdrop-contrast, ) var(--tw-backdrop-grayscale, ) var(--tw-backdrop-hue-rotate, ) var(--tw-backdrop-invert, ) var(--tw-backdrop-opacity, ) var(--tw-backdrop-saturate, ) var(--tw-backdrop-sepia, );
  }

  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-\[color\,box-shadow\] {
    transition-property: color, box-shadow;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-opacity {
    transition-property: opacity;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-transform {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .duration-200 {
    --tw-duration: .2s;
    transition-duration: .2s;
  }

  .duration-300 {
    --tw-duration: .3s;
    transition-duration: .3s;
  }

  .duration-400 {
    --tw-duration: .4s;
    transition-duration: .4s;
  }

  .duration-500 {
    --tw-duration: .5s;
    transition-duration: .5s;
  }

  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }

  .ease-out {
    --tw-ease: var(--ease-out);
    transition-timing-function: var(--ease-out);
  }

  .btn-outline:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-fg: var(--btn-color);
    --btn-border: var(--btn-color);
    --btn-noise: none;
  }

  .btn-soft:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled) {
    --btn-shadow: "";
    --btn-fg: var(--btn-color, var(--color-base-content));
    --btn-bg: var(--btn-color, var(--color-base-content));
    --btn-border: var(--btn-color, var(--color-base-content));
    --btn-noise: none;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled) {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-content)) 8%, var(--color-base-100));
      --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-content)) 10%, var(--color-base-100));
    }
  }

  .btn-lg {
    --fontsize: 1.125rem;
    --btn-p: 1.25rem;
    --size: calc(var(--size-field, .25rem) * 12);
  }

  .btn-md {
    --fontsize: .875rem;
    --btn-p: 1rem;
    --size: calc(var(--size-field, .25rem) * 10);
  }

  .btn-sm {
    --fontsize: .75rem;
    --btn-p: .75rem;
    --size: calc(var(--size-field, .25rem) * 8);
  }

  .btn-xl {
    --fontsize: 1.375rem;
    --btn-p: 1.5rem;
    --size: calc(var(--size-field, .25rem) * 14);
  }

  .btn-xs {
    --fontsize: .6875rem;
    --btn-p: .5rem;
    --size: calc(var(--size-field, .25rem) * 6);
  }

  .btn-accent {
    --btn-color: var(--color-accent);
    --btn-fg: var(--color-accent-content);
  }

  .btn-error {
    --btn-color: var(--color-error);
    --btn-fg: var(--color-error-content);
  }

  .btn-info {
    --btn-color: var(--color-info);
    --btn-fg: var(--color-info-content);
  }

  .btn-neutral {
    --btn-color: var(--color-neutral);
    --btn-fg: var(--color-neutral-content);
  }

  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }

  .btn-secondary {
    --btn-color: var(--color-secondary);
    --btn-fg: var(--color-secondary-content);
  }

  .btn-success {
    --btn-color: var(--color-success);
    --btn-fg: var(--color-success-content);
  }

  .btn-warning {
    --btn-color: var(--color-warning);
    --btn-fg: var(--color-warning-content);
  }

  .outline-none {
    --tw-outline-style: none;
    outline-style: none;
  }

  .backface-hidden {
    backface-visibility: hidden;
  }

  :where(.divide-x-reverse > :not(:last-child)) {
    --tw-divide-x-reverse: 1;
  }

  .ring-inset {
    --tw-ring-inset: inset;
  }

  .group-data-\[state\=open\]\:rotate-180:is(:where(.group)[data-state="open"] *) {
    rotate: 180deg;
  }

  .group-data-\[viewport\=false\]\/navigation-menu\:top-full:is(:where(.group\/navigation-menu)[data-viewport="false"] *) {
    top: 100%;
  }

  .group-data-\[viewport\=false\]\/navigation-menu\:mt-1\.5:is(:where(.group\/navigation-menu)[data-viewport="false"] *) {
    margin-top: calc(var(--spacing) * 1.5);
  }

  .group-data-\[viewport\=false\]\/navigation-menu\:overflow-hidden:is(:where(.group\/navigation-menu)[data-viewport="false"] *) {
    overflow: hidden;
  }

  .group-data-\[viewport\=false\]\/navigation-menu\:rounded-md:is(:where(.group\/navigation-menu)[data-viewport="false"] *) {
    border-radius: var(--radius-md);
  }

  .group-data-\[viewport\=false\]\/navigation-menu\:border:is(:where(.group\/navigation-menu)[data-viewport="false"] *) {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }

  .group-data-\[viewport\=false\]\/navigation-menu\:shadow:is(:where(.group\/navigation-menu)[data-viewport="false"] *) {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, #0000001a), 0 1px 2px -1px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .group-data-\[viewport\=false\]\/navigation-menu\:duration-200:is(:where(.group\/navigation-menu)[data-viewport="false"] *) {
    --tw-duration: .2s;
    transition-duration: .2s;
  }

  @media (hover: hover) {
    .hover\:scale-\[1\.01\]:hover {
      scale: 1.01;
    }
  }

  @media (hover: hover) {
    .hover\:scale-\[1\.1\]:hover {
      scale: 1.1;
    }
  }

  @media (hover: hover) {
    .hover\:scale-\[1\.02\]:hover {
      scale: 1.02;
    }
  }

  @media (hover: hover) {
    .hover\:scale-\[1\.03\]:hover {
      scale: 1.03;
    }
  }

  @media (hover: hover) {
    .hover\:scale-\[1\.05\]:hover {
      scale: 1.05;
    }
  }

  @media (hover: hover) {
    .hover\:border-none:hover {
      --tw-border-style: none;
      border-style: none;
    }
  }

  @media (hover: hover) {
    .hover\:bg-\[\#E8252E\]:hover {
      background-color: #e8252e;
    }
  }

  @media (hover: hover) {
    .hover\:bg-\[\#FF2727\]:hover {
      background-color: #ff2727;
    }
  }

  @media (hover: hover) {
    .hover\:bg-\[\#FF2727\]\/80:hover {
      background-color: oklab(64.0946% .216518 .113917 / .8);
    }
  }

  @media (hover: hover) {
    .hover\:bg-\[\#FFC383\]:hover {
      background-color: #ffc383;
    }
  }

  @media (hover: hover) {
    .hover\:bg-\[black\]\/20:hover {
      background-color: oklab(0% none none / .2);
    }
  }

  @media (hover: hover) {
    .hover\:bg-accent:hover {
      background-color: var(--color-accent);
    }
  }

  @media (hover: hover) {
    .hover\:bg-blue-600:hover {
      background-color: var(--color-blue-600);
    }
  }

  @media (hover: hover) {
    .hover\:bg-primary\/90:hover {
      background-color: var(--color-primary);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .hover\:bg-primary\/90:hover {
        background-color: color-mix(in oklab, var(--color-primary) 90%, transparent);
      }
    }
  }

  @media (hover: hover) {
    .hover\:bg-secondary\/80:hover {
      background-color: var(--color-secondary);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .hover\:bg-secondary\/80:hover {
        background-color: color-mix(in oklab, var(--color-secondary) 80%, transparent);
      }
    }
  }

  @media (hover: hover) {
    .hover\:bg-white:hover {
      background-color: var(--color-white);
    }
  }

  @media (hover: hover) {
    .hover\:bg-gradient-to-b:hover {
      --tw-gradient-position: to bottom in oklab;
      background-image: linear-gradient(var(--tw-gradient-stops));
    }
  }

  @media (hover: hover) {
    .hover\:text-white:hover {
      color: var(--color-white);
    }
  }

  @media (hover: hover) {
    .hover\:underline:hover {
      text-decoration-line: underline;
    }
  }

  @media (hover: hover) {
    .hover\:opacity-100:hover {
      opacity: 1;
    }
  }

  @media (hover: hover) {
    .hover\:shadow-xl:hover {
      --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, #0000001a), 0 8px 10px -6px var(--tw-shadow-color, #0000001a);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }

  @media (hover: hover) {
    .hover\:duration-300:hover {
      --tw-duration: .3s;
      transition-duration: .3s;
    }
  }

  .focus\:bg-accent:focus {
    background-color: var(--color-accent);
  }

  .focus\:ring-2:focus {
    --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .focus\:ring-offset-2:focus {
    --tw-ring-offset-width: 2px;
    --tw-ring-offset-shadow: var(--tw-ring-inset, ) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  }

  .focus\:outline-hidden:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .focus\:outline-hidden:focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .focus\:outline-0:focus {
    outline-style: var(--tw-outline-style);
    outline-width: 0;
  }

  .focus\:outline-black\/5:focus {
    outline-color: #0000000d;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .focus\:outline-black\/5:focus {
      outline-color: color-mix(in oklab, var(--color-black) 5%, transparent);
    }
  }

  .focus-visible\:ring-\[3px\]:focus-visible {
    --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .focus-visible\:outline-1:focus-visible {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }

  .active\:scale-95:active {
    --tw-scale-x: 95%;
    --tw-scale-y: 95%;
    --tw-scale-z: 95%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
  }

  .disabled\:pointer-events-none:disabled {
    pointer-events: none;
  }

  .disabled\:opacity-50:disabled {
    opacity: .5;
  }

  .has-\[\>svg\]\:px-2\.5:has( > svg) {
    padding-inline: calc(var(--spacing) * 2.5);
  }

  .has-\[\>svg\]\:px-3:has( > svg) {
    padding-inline: calc(var(--spacing) * 3);
  }

  .has-\[\>svg\]\:px-4:has( > svg) {
    padding-inline: calc(var(--spacing) * 4);
  }

  .data-\[active\=true\]\:bg-accent\/50[data-active="true"] {
    background-color: var(--color-accent);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .data-\[active\=true\]\:bg-accent\/50[data-active="true"] {
      background-color: color-mix(in oklab, var(--color-accent) 50%, transparent);
    }
  }

  @media (hover: hover) {
    .data-\[active\=true\]\:hover\:bg-accent[data-active="true"]:hover {
      background-color: var(--color-accent);
    }
  }

  .data-\[active\=true\]\:focus\:bg-accent[data-active="true"]:focus {
    background-color: var(--color-accent);
  }

  :is(.\*\*\:data-\[slot\=navigation-menu-link\]\:focus\:ring-0 *)[data-slot="navigation-menu-link"]:focus {
    --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  :is(.\*\*\:data-\[slot\=navigation-menu-link\]\:focus\:outline-none *)[data-slot="navigation-menu-link"]:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  .data-\[state\=open\]\:bg-accent[data-state="open"] {
    background-color: var(--color-accent);
  }

  .data-\[state\=open\]\:bg-accent\/50[data-state="open"] {
    background-color: var(--color-accent);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .data-\[state\=open\]\:bg-accent\/50[data-state="open"] {
      background-color: color-mix(in oklab, var(--color-accent) 50%, transparent);
    }
  }

  @media (hover: hover) {
    .data-\[state\=open\]\:hover\:bg-accent[data-state="open"]:hover {
      background-color: var(--color-accent);
    }
  }

  .data-\[state\=open\]\:focus\:bg-accent[data-state="open"]:focus {
    background-color: var(--color-accent);
  }

  @media (width >= 40rem) {
    .sm\:mt-0 {
      margin-top: calc(var(--spacing) * 0);
    }
  }

  @media (width >= 40rem) {
    .sm\:mt-20 {
      margin-top: calc(var(--spacing) * 20);
    }
  }

  @media (width >= 40rem) {
    .sm\:ml-5 {
      margin-left: calc(var(--spacing) * 5);
    }
  }

  @media (width >= 40rem) {
    .sm\:w-\[60\%\] {
      width: 60%;
    }
  }

  @media (width >= 40rem) {
    .sm\:w-\[80\%\] {
      width: 80%;
    }
  }

  @media (width >= 40rem) {
    .sm\:max-w-lg {
      max-width: var(--container-lg);
    }
  }

  @media (width >= 40rem) {
    .sm\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }

  @media (width >= 40rem) {
    .sm\:flex-row {
      flex-direction: row;
    }
  }

  @media (width >= 40rem) {
    .sm\:justify-end {
      justify-content: flex-end;
    }
  }

  @media (width >= 40rem) {
    .sm\:pt-12 {
      padding-top: calc(var(--spacing) * 12);
    }
  }

  @media (width >= 40rem) {
    .sm\:text-left {
      text-align: left;
    }
  }

  @media (width >= 48rem) {
    .md\:absolute {
      position: absolute;
    }
  }

  @media (width >= 48rem) {
    .md\:flex {
      display: flex;
    }
  }

  @media (width >= 48rem) {
    .md\:h-\[12rem\] {
      height: 12rem;
    }
  }

  @media (width >= 48rem) {
    .md\:h-\[45rem\] {
      height: 45rem;
    }
  }

  @media (width >= 48rem) {
    .md\:w-1\/2 {
      width: 50%;
    }
  }

  @media (width >= 48rem) {
    .md\:w-\[55\%\] {
      width: 55%;
    }
  }

  @media (width >= 48rem) {
    .md\:w-\[var\(--radix-navigation-menu-viewport-width\)\] {
      width: var(--radix-navigation-menu-viewport-width);
    }
  }

  @media (width >= 48rem) {
    .md\:w-auto {
      width: auto;
    }
  }

  @media (width >= 48rem) {
    .md\:flex-row {
      flex-direction: row;
    }
  }

  @media (width >= 48rem) {
    .md\:rounded-tl-none {
      border-top-left-radius: 0;
    }
  }

  @media (width >= 48rem) {
    .md\:rounded-tr-2xl {
      border-top-right-radius: var(--radius-2xl);
    }
  }

  @media (width >= 48rem) {
    .md\:rounded-br-2xl {
      border-bottom-right-radius: var(--radius-2xl);
    }
  }

  @media (width >= 48rem) {
    .md\:rounded-bl-none {
      border-bottom-left-radius: 0;
    }
  }

  @media (width >= 48rem) {
    .md\:p-3 {
      padding: calc(var(--spacing) * 3);
    }
  }

  @media (width >= 64rem) {
    .lg\:-top-\[9rem\] {
      top: -9rem;
    }
  }

  @media (width >= 64rem) {
    .lg\:right-\[25rem\] {
      right: 25rem;
    }
  }

  @media (width >= 64rem) {
    .lg\:left-\[25rem\] {
      left: 25rem;
    }
  }

  @media (width >= 64rem) {
    .lg\:mt-0 {
      margin-top: calc(var(--spacing) * 0);
    }
  }

  @media (width >= 64rem) {
    .lg\:h-\[15rem\] {
      height: 15rem;
    }
  }

  @media (width >= 64rem) {
    .lg\:h-\[24\.5rem\] {
      height: 24.5rem;
    }
  }

  @media (width >= 64rem) {
    .lg\:h-\[27rem\] {
      height: 27rem;
    }
  }

  @media (width >= 64rem) {
    .lg\:w-\[20\%\] {
      width: 20%;
    }
  }

  @media (width >= 64rem) {
    .lg\:w-\[40\%\] {
      width: 40%;
    }
  }

  @media (width >= 64rem) {
    .lg\:w-\[60\%\] {
      width: 60%;
    }
  }

  @media (width >= 64rem) {
    .lg\:w-\[65\%\] {
      width: 65%;
    }
  }

  @media (width >= 64rem) {
    .lg\:w-\[75\%\] {
      width: 75%;
    }
  }

  @media (width >= 64rem) {
    .lg\:w-\[80\%\] {
      width: 80%;
    }
  }

  @media (width >= 64rem) {
    .lg\:w-\[85\%\] {
      width: 85%;
    }
  }

  @media (width >= 64rem) {
    .lg\:w-\[100\%\] {
      width: 100%;
    }
  }

  @media (width >= 64rem) {
    .lg\:grid-cols-3 {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }

  @media (width >= 64rem) {
    .lg\:grid-cols-4 {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
  }

  @media (width >= 64rem) {
    .lg\:pt-2 {
      padding-top: calc(var(--spacing) * 2);
    }
  }

  @media (width >= 64rem) {
    .lg\:text-left {
      text-align: left;
    }
  }

  @media (width >= 64rem) {
    .lg\:text-3xl {
      font-size: var(--text-3xl);
      line-height: var(--tw-leading, var(--text-3xl--line-height));
    }
  }

  @media (width >= 64rem) {
    .lg\:text-5xl {
      font-size: var(--text-5xl);
      line-height: var(--tw-leading, var(--text-5xl--line-height));
    }
  }

  @media (width >= 64rem) {
    .lg\:text-sm {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
    }
  }

  @media (width >= 80rem) {
    .xl\:right-\[31rem\] {
      right: 31rem;
    }
  }

  @media (width >= 80rem) {
    .xl\:left-\[31rem\] {
      left: 31rem;
    }
  }

  @media (width >= 80rem) {
    .xl\:h-\[42\.5rem\] {
      height: 42.5rem;
    }
  }

  @media (width >= 80rem) {
    .xl\:w-\[16\%\] {
      width: 16%;
    }
  }

  @media (width >= 80rem) {
    .xl\:grid-cols-4 {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
  }

  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:hover\:bg-accent\/50:hover {
        background-color: var(--color-accent);
      }

      @supports (color: color-mix(in lab, red, red)) {
        .dark\:hover\:bg-accent\/50:hover {
          background-color: color-mix(in oklab, var(--color-accent) 50%, transparent);
        }
      }
    }
  }

  .\[\&_svg\]\:pointer-events-none svg {
    pointer-events: none;
  }

  .\[\&_svg\]\:shrink-0 svg {
    flex-shrink: 0;
  }

  .\[\&_svg\:not\(\[class\*\=\'size-\'\]\)\]\:size-4 svg:not([class*="size-"]) {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }
}

:root {
  --font-inter: "Inter", sans-serif;
}

body {
  font-family: var(--font-inter);
}

@keyframes skeleton {
  0% {
    background-position: 150%;
  }

  100% {
    background-position: -50%;
  }
}

@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}

@keyframes radio {
  0% {
    padding: 5px;
  }

  50% {
    padding: 3px;
  }
}

@keyframes dropdown {
  0% {
    opacity: 0;
  }
}

@keyframes rating {
  0%, 40% {
    filter: brightness(1.05) contrast(1.05);
    scale: 1.1;
  }
}

@keyframes toast {
  0% {
    opacity: 0;
    scale: .9;
  }

  100% {
    opacity: 1;
    scale: 1;
  }
}

@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-scale-x {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

@property --tw-scale-y {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

@property --tw-scale-z {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

@property --tw-rotate-x {
  syntax: "*";
  inherits: false
}

@property --tw-rotate-y {
  syntax: "*";
  inherits: false
}

@property --tw-rotate-z {
  syntax: "*";
  inherits: false
}

@property --tw-skew-x {
  syntax: "*";
  inherits: false
}

@property --tw-skew-y {
  syntax: "*";
  inherits: false
}

@property --tw-pan-x {
  syntax: "*";
  inherits: false
}

@property --tw-pan-y {
  syntax: "*";
  inherits: false
}

@property --tw-pinch-zoom {
  syntax: "*";
  inherits: false
}

@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-space-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-divide-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-divide-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-gradient-position {
  syntax: "*";
  inherits: false
}

@property --tw-gradient-from {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}

@property --tw-gradient-via {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}

@property --tw-gradient-to {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}

@property --tw-gradient-stops {
  syntax: "*";
  inherits: false
}

@property --tw-gradient-via-stops {
  syntax: "*";
  inherits: false
}

@property --tw-gradient-from-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 0%;
}

@property --tw-gradient-via-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 50%;
}

@property --tw-gradient-to-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-leading {
  syntax: "*";
  inherits: false
}

@property --tw-font-weight {
  syntax: "*";
  inherits: false
}

@property --tw-tracking {
  syntax: "*";
  inherits: false
}

@property --tw-ordinal {
  syntax: "*";
  inherits: false
}

@property --tw-slashed-zero {
  syntax: "*";
  inherits: false
}

@property --tw-numeric-figure {
  syntax: "*";
  inherits: false
}

@property --tw-numeric-spacing {
  syntax: "*";
  inherits: false
}

@property --tw-numeric-fraction {
  syntax: "*";
  inherits: false
}

@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-ring-color {
  syntax: "*";
  inherits: false
}

@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false
}

@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-ring-inset {
  syntax: "*";
  inherits: false
}

@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0;
}

@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}

@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-blur {
  syntax: "*";
  inherits: false
}

@property --tw-brightness {
  syntax: "*";
  inherits: false
}

@property --tw-contrast {
  syntax: "*";
  inherits: false
}

@property --tw-grayscale {
  syntax: "*";
  inherits: false
}

@property --tw-hue-rotate {
  syntax: "*";
  inherits: false
}

@property --tw-invert {
  syntax: "*";
  inherits: false
}

@property --tw-opacity {
  syntax: "*";
  inherits: false
}

@property --tw-saturate {
  syntax: "*";
  inherits: false
}

@property --tw-sepia {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-blur {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-brightness {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-contrast {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-grayscale {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-hue-rotate {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-invert {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-opacity {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-saturate {
  syntax: "*";
  inherits: false
}

@property --tw-backdrop-sepia {
  syntax: "*";
  inherits: false
}

@property --tw-duration {
  syntax: "*";
  inherits: false
}

@property --tw-ease {
  syntax: "*";
  inherits: false
}

/*# sourceMappingURL=app_globals_css_f9ee138c._.single.css.map*/